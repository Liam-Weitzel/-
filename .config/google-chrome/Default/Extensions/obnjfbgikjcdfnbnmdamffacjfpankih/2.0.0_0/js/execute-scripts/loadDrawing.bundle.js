(()=>{var e={757:(e,r,t)=>{e.exports=t(666)},901:function(e,r,t){var n,a;!function(s){"use strict";var o,i={};i.VERSION="1.6.1";var g={},l=function(e,r){return function(){return r.apply(e,arguments)}},c=function(){var e,r,t=arguments,n=t[0];for(r=1;r<t.length;r++)for(e in t[r])!(e in n)&&t[r].hasOwnProperty(e)&&(n[e]=t[r][e]);return n},m=function(e,r){return{value:e,name:r}};i.TRACE=m(1,"TRACE"),i.DEBUG=m(2,"DEBUG"),i.INFO=m(3,"INFO"),i.TIME=m(4,"TIME"),i.WARN=m(5,"WARN"),i.ERROR=m(8,"ERROR"),i.OFF=m(99,"OFF");var u=function(e){this.context=e,this.setLevel(e.filterLevel),this.log=this.info};u.prototype={setLevel:function(e){e&&"value"in e&&(this.context.filterLevel=e)},getLevel:function(){return this.context.filterLevel},enabledFor:function(e){var r=this.context.filterLevel;return e.value>=r.value},trace:function(){this.invoke(i.TRACE,arguments)},debug:function(){this.invoke(i.DEBUG,arguments)},info:function(){this.invoke(i.INFO,arguments)},warn:function(){this.invoke(i.WARN,arguments)},error:function(){this.invoke(i.ERROR,arguments)},time:function(e){"string"==typeof e&&e.length>0&&this.invoke(i.TIME,[e,"start"])},timeEnd:function(e){"string"==typeof e&&e.length>0&&this.invoke(i.TIME,[e,"end"])},invoke:function(e,r){o&&this.enabledFor(e)&&o(r,c({level:e},this.context))}};var A,f=new u({filterLevel:i.OFF});(A=i).enabledFor=l(f,f.enabledFor),A.trace=l(f,f.trace),A.debug=l(f,f.debug),A.time=l(f,f.time),A.timeEnd=l(f,f.timeEnd),A.info=l(f,f.info),A.warn=l(f,f.warn),A.error=l(f,f.error),A.log=A.info,i.setHandler=function(e){o=e},i.setLevel=function(e){for(var r in f.setLevel(e),g)g.hasOwnProperty(r)&&g[r].setLevel(e)},i.getLevel=function(){return f.getLevel()},i.get=function(e){return g[e]||(g[e]=new u(c({name:e},f.context)))},i.createDefaultHandler=function(e){(e=e||{}).formatter=e.formatter||function(e,r){r.name&&e.unshift("["+r.name+"]")};var r={},t=function(e,r){Function.prototype.apply.call(e,console,r)};return"undefined"==typeof console?function(){}:function(n,a){n=Array.prototype.slice.call(n);var s,o=console.log;a.level===i.TIME?(s=(a.name?"["+a.name+"] ":"")+n[0],"start"===n[1]?console.time?console.time(s):r[s]=(new Date).getTime():console.timeEnd?console.timeEnd(s):t(o,[s+": "+((new Date).getTime()-r[s])+"ms"])):(a.level===i.WARN&&console.warn?o=console.warn:a.level===i.ERROR&&console.error?o=console.error:a.level===i.INFO&&console.info?o=console.info:a.level===i.DEBUG&&console.debug?o=console.debug:a.level===i.TRACE&&console.trace&&(o=console.trace),e.formatter(n,a),t(o,n))}},i.useDefaults=function(e){i.setLevel(e&&e.defaultLevel||i.DEBUG),i.setHandler(i.createDefaultHandler(e))},i.setDefaults=i.useDefaults,void 0===(a="function"==typeof(n=i)?n.call(r,t,r,e):n)||(e.exports=a)}()},666:e=>{var r=function(e){"use strict";var r,t=Object.prototype,n=t.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},s=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag";function g(e,r,t,n){var a=r&&r.prototype instanceof d?r:d,s=Object.create(a.prototype),o=new P(n||[]);return s._invoke=function(e,r,t){var n=c;return function(a,s){if(n===u)throw new Error("Generator is already running");if(n===A){if("throw"===a)throw s;return R()}for(t.method=a,t.arg=s;;){var o=t.delegate;if(o){var i=E(o,t);if(i){if(i===f)continue;return i}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(n===c)throw n=A,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);n=u;var g=l(e,r,t);if("normal"===g.type){if(n=t.done?A:m,g.arg===f)continue;return{value:g.arg,done:t.done}}"throw"===g.type&&(n=A,t.method="throw",t.arg=g.arg)}}}(e,t,o),s}function l(e,r,t){try{return{type:"normal",arg:e.call(r,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=g;var c="suspendedStart",m="suspendedYield",u="executing",A="completed",f={};function d(){}function h(){}function x(){}var p={};p[s]=function(){return this};var v=Object.getPrototypeOf,w=v&&v(v(T([])));w&&w!==t&&n.call(w,s)&&(p=w);var y=x.prototype=d.prototype=Object.create(p);function b(e){["next","throw","return"].forEach((function(r){e[r]=function(e){return this._invoke(r,e)}}))}function k(e,r){function t(a,s,o,i){var g=l(e[a],e,s);if("throw"!==g.type){var c=g.arg,m=c.value;return m&&"object"==typeof m&&n.call(m,"__await")?r.resolve(m.__await).then((function(e){t("next",e,o,i)}),(function(e){t("throw",e,o,i)})):r.resolve(m).then((function(e){c.value=e,o(c)}),(function(e){return t("throw",e,o,i)}))}i(g.arg)}var a;this._invoke=function(e,n){function s(){return new r((function(r,a){t(e,n,r,a)}))}return a=a?a.then(s,s):s()}}function E(e,t){var n=e.iterator[t.method];if(n===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=r,E(e,t),"throw"===t.method))return f;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var a=l(n,e.iterator,t.arg);if("throw"===a.type)return t.method="throw",t.arg=a.arg,t.delegate=null,f;var s=a.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=r),t.delegate=null,f):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function S(e){var r={tryLoc:e[0]};1 in e&&(r.catchLoc=e[1]),2 in e&&(r.finallyLoc=e[2],r.afterLoc=e[3]),this.tryEntries.push(r)}function L(e){var r=e.completion||{};r.type="normal",delete r.arg,e.completion=r}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function T(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,o=function t(){for(;++a<e.length;)if(n.call(e,a))return t.value=e[a],t.done=!1,t;return t.value=r,t.done=!0,t};return o.next=o}}return{next:R}}function R(){return{value:r,done:!0}}return h.prototype=y.constructor=x,x.constructor=h,x[i]=h.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var r="function"==typeof e&&e.constructor;return!!r&&(r===h||"GeneratorFunction"===(r.displayName||r.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,x):(e.__proto__=x,i in e||(e[i]="GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},b(k.prototype),k.prototype[o]=function(){return this},e.AsyncIterator=k,e.async=function(r,t,n,a,s){void 0===s&&(s=Promise);var o=new k(g(r,t,n,a),s);return e.isGeneratorFunction(t)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},b(y),y[i]="Generator",y[s]=function(){return this},y.toString=function(){return"[object Generator]"},e.keys=function(e){var r=[];for(var t in e)r.push(t);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=T,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(L),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=r)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function a(n,a){return i.type="throw",i.arg=e,t.next=n,a&&(t.method="next",t.arg=r),!!a}for(var s=this.tryEntries.length-1;s>=0;--s){var o=this.tryEntries[s],i=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var g=n.call(o,"catchLoc"),l=n.call(o,"finallyLoc");if(g&&l){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(g){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(e,r){for(var t=this.tryEntries.length-1;t>=0;--t){var a=this.tryEntries[t];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var s=a;break}}s&&("break"===e||"continue"===e)&&s.tryLoc<=r&&r<=s.finallyLoc&&(s=null);var o=s?s.completion:{};return o.type=e,o.arg=r,s?(this.method="next",this.next=s.finallyLoc,f):this.complete(o)},complete:function(e,r){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&r&&(this.next=r),f},finish:function(e){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),L(t),f}},catch:function(e){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.tryLoc===e){var n=t.completion;if("throw"===n.type){var a=n.arg;L(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:T(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=r),f}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},416:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.browser=t(337)},337:function(e,r){var t,n,a;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,n=[e],t=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const r="The message port closed before a response was received.",t="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",n=e=>{const n={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(n).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class a extends WeakMap{constructor(e,r=void 0){super(r),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}const s=e=>e&&"object"==typeof e&&"function"==typeof e.then,o=(r,t)=>(...n)=>{e.runtime.lastError?r.reject(new Error(e.runtime.lastError.message)):t.singleCallbackArg||n.length<=1&&!1!==t.singleCallbackArg?r.resolve(n[0]):r.resolve(n)},i=e=>1==e?"argument":"arguments",g=(e,r)=>function(t,...n){if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${i(r.minArgs)} for ${e}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${i(r.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((a,s)=>{if(r.fallbackToNoCallback)try{t[e](...n,o({resolve:a,reject:s},r))}catch(s){console.warn(`${e} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,s),t[e](...n),r.fallbackToNoCallback=!1,r.noCallback=!0,a()}else r.noCallback?(t[e](...n),a()):t[e](...n,o({resolve:a,reject:s},r))}))},l=(e,r,t)=>new Proxy(r,{apply:(r,n,a)=>t.call(n,e,...a)});let c=Function.call.bind(Object.prototype.hasOwnProperty);const m=(e,r={},t={})=>{let n=Object.create(null),a={has:(r,t)=>t in e||t in n,get(a,s,o){if(s in n)return n[s];if(!(s in e))return;let i=e[s];if("function"==typeof i)if("function"==typeof r[s])i=l(e,e[s],r[s]);else if(c(t,s)){let r=g(s,t[s]);i=l(e,e[s],r)}else i=i.bind(e);else if("object"==typeof i&&null!==i&&(c(r,s)||c(t,s)))i=m(i,r[s],t[s]);else{if(!c(t,"*"))return Object.defineProperty(n,s,{configurable:!0,enumerable:!0,get:()=>e[s],set(r){e[s]=r}}),i;i=m(i,r[s],t["*"])}return n[s]=i,i},set:(r,t,a,s)=>(t in n?n[t]=a:e[t]=a,!0),defineProperty:(e,r,t)=>Reflect.defineProperty(n,r,t),deleteProperty:(e,r)=>Reflect.deleteProperty(n,r)},s=Object.create(e);return new Proxy(s,a)},u=e=>({addListener(r,t,...n){r.addListener(e.get(t),...n)},hasListener:(r,t)=>r.hasListener(e.get(t)),removeListener(r,t){r.removeListener(e.get(t))}}),A=new a((e=>"function"!=typeof e?e:function(r){const t=m(r,{},{getContent:{minArgs:0,maxArgs:0}});e(t)}));let f=!1;const d=new a((e=>"function"!=typeof e?e:function(r,n,a){let o,i,g=!1,l=new Promise((e=>{o=function(r){f||(console.warn(t,(new Error).stack),f=!0),g=!0,e(r)}}));try{i=e(r,n,o)}catch(e){i=Promise.reject(e)}const c=!0!==i&&s(i);if(!0!==i&&!c&&!g)return!1;const m=e=>{e.then((e=>{a(e)}),(e=>{let r;r=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",a({__mozWebExtensionPolyfillReject__:!0,message:r})})).catch((e=>{console.error("Failed to send onMessage rejected reply",e)}))};return m(c?i:l),!0})),h=({reject:t,resolve:n},a)=>{e.runtime.lastError?e.runtime.lastError.message===r?n():t(new Error(e.runtime.lastError.message)):a&&a.__mozWebExtensionPolyfillReject__?t(new Error(a.message)):n(a)},x=(e,r,t,...n)=>{if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${i(r.minArgs)} for ${e}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${i(r.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((e,r)=>{const a=h.bind(null,{resolve:e,reject:r});n.push(a),t.sendMessage(...n)}))},p={devtools:{network:{onRequestFinished:u(A)}},runtime:{onMessage:u(d),onMessageExternal:u(d),sendMessage:x.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:x.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},v={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return n.privacy={network:{"*":v},services:{"*":v},websites:{"*":v}},m(e,p,n)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=n(chrome)}else e.exports=browser},void 0===(a="function"==typeof t?t.apply(r,n):t)||(e.exports=a)}},r={};function t(n){var a=r[n];if(void 0!==a)return a.exports;var s=r[n]={exports:{}};return e[n].call(s.exports,s,s.exports,t),s.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{"use strict";var e=t(757),r=t.n(e);function n(e){return new Promise(((r,t)=>{e.oncomplete=e.onsuccess=()=>r(e.result),e.onabort=e.onerror=()=>t(e.error)}))}function a(e,r){const t=indexedDB.open(e);t.onupgradeneeded=()=>t.result.createObjectStore(r);const a=n(t);return(e,t)=>a.then((n=>t(n.transaction(r,e).objectStore(r))))}let s;function o(){return s||(s=a("keyval-store","keyval")),s}function i(e,r=o()){return r("readonly",(r=>Promise.all(e.map((e=>n(r.get(e)))))))}var g=t(901),l=t.n(g);l().useDefaults(),l().setLevel(l().ERROR);const c=l();function m(e){return new Promise(((r,t)=>{const n=new FileReader;n.onloadend=()=>{const e=n.result;r(e)},n.onerror=t,n.readAsDataURL(e)}))}const u=Math.round(375),A=Math.round(195),f="__drawing_id";function d(e,r){if(c.log("👉 Original Image dimensions:",`${Math.round(e)} x ${Math.round(r)}`),e<=u&&r<=A)return{width:Math.max(1,e),height:Math.max(1,r),scale:1};const t=e/u,n=r/A,a=Math.max(t,n);return e=Math.max(1,Math.round(e/a)),r=Math.max(1,Math.round(r/a)),c.log("New Image dimensions",`${Math.round(e)} x ${Math.round(r)}`,a),{width:e,height:r,scale:1/a}}function h(e,r,t,n,a,s,o){try{var i=e[s](o),g=i.value}catch(e){return void t(e)}i.done?r(g):Promise.resolve(g).then(n,a)}function x(e){return function(){var r=this,t=arguments;return new Promise((function(n,a){var s=e.apply(r,t);function o(e){h(s,n,a,o,i,"next",e)}function i(e){h(s,n,a,o,i,"throw",e)}o(void 0)}))}}const p=a("files-db","files-store");function v(){return w.apply(this,arguments)}function w(){return w=x(r().mark((function e(){var t,n,a,s,o,i,g,l,m,u=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=u.length>0&&void 0!==u[0]?u[0]:{takeScreenshot:!0},n=k(),a=n.excalidraw,s=n.excalidrawState,o=n.versionFiles,i=n.versionDataState,g=JSON.parse(a),l=JSON.parse(s),e.prev=4,null==t||!t.takeScreenshot){e.next=9;break}return e.next=8,y({elements:g,appState:l});case 8:m=e.sent;case 9:e.next=14;break;case 11:e.prev=11,e.t0=e.catch(4),c.error("Error taking screenshot",e.t0);case 14:return e.abrupt("return",{excalidraw:a,excalidrawState:s,versionFiles:o,versionDataState:i,imageBase64:m,viewBackgroundColor:null==l?void 0:l.viewBackgroundColor});case 15:case"end":return e.stop()}}),e,null,[[4,11]])}))),w.apply(this,arguments)}function y(e){return b.apply(this,arguments)}function b(){return(b=x(r().mark((function e(t){var n,a,s,o,g,l,u;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.elements,a=t.appState,s=(new Date).getTime(),o=n.filter((e=>"image"===e.type)).map((e=>e.fileId)),g={},e.prev=4,e.next=7,i(o,p);case 7:e.sent.forEach((e=>{e&&(g[e.id]=e)})),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(4),c.warn("Error retrieving files from IndexedDB",e.t0);case 14:return e.next=16,window.ExcalidrawLib.exportToBlob({elements:n,getDimensions:(e,r)=>d(e,r),files:g,appState:a});case 16:return l=e.sent,e.next=19,m(l);case 19:return u=e.sent,c.log("📷 Take Screenshoot Took:",(new Date).getTime()-s+"ms"),e.abrupt("return",u);case 22:case"end":return e.stop()}}),e,null,[[4,11]])})))).apply(this,arguments)}function k(){return{excalidraw:localStorage.getItem("excalidraw"),excalidrawState:localStorage.getItem("excalidraw-state"),versionFiles:localStorage.getItem("version-files"),versionDataState:localStorage.getItem("version-dataState")}}function E(){const e=window.__SCRIPT_PARAMS__;return window.__SCRIPT_PARAMS__=void 0,e}let S;function L(e,r,t,n,a,s,o){try{var i=e[s](o),g=i.value}catch(e){return void t(e)}i.done?r(g):Promise.resolve(g).then(n,a)}!function(e){e.SAVE_DRAWING="SAVE_DRAWING",e.SAVE_NEW_DRAWING="SAVE_NEW_DRAWING"}(S||(S={}));const P=t(416).browser;var T;(T=r().mark((function e(){var t,n,a,s,o,i,g,l,m,u,A;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=E(),n=null==t?void 0:t.id){e.next=5;break}return c.info("No drawing id found, could not load"),e.abrupt("return");case 5:if(!(a=localStorage.getItem(f))){e.next=12;break}return e.next=9,v();case 9:return s=e.sent,e.next=12,P.runtime.sendMessage({type:S.SAVE_DRAWING,payload:{id:a,excalidraw:s.excalidraw,excalidrawState:s.excalidrawState,versionFiles:s.versionFiles,versionDataState:s.versionDataState,imageBase64:s.imageBase64,viewBackgroundColor:s.viewBackgroundColor}});case 12:return e.next=14,P.storage.local.get(n);case 14:if(o=e.sent,i=o[n]){e.next=19;break}return c.error("No drawing data found"),e.abrupt("return");case 19:g=i.data,l=g.excalidraw,m=g.excalidrawState,u=g.versionFiles,A=g.versionDataState,window.addEventListener("beforeunload",(()=>{localStorage.setItem("excalidraw",l),localStorage.setItem("excalidraw-state",m),localStorage.setItem("version-files",u),localStorage.setItem("version-dataState",A),localStorage.setItem(f,n)})),location.reload();case 22:case"end":return e.stop()}}),e)})),function(){var e=this,r=arguments;return new Promise((function(t,n){var a=T.apply(e,r);function s(e){L(a,t,n,s,o,"next",e)}function o(e){L(a,t,n,s,o,"throw",e)}s(void 0)}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvZXhlY3V0ZS1zY3JpcHRzL2xvYWREcmF3aW5nLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiMkJBQUFBLEVBQU9DLFFBQVUsRUFBakIsSSxzQkNBQSxTQUtDLFNBQVVDLEdBQ1YsYUFHQSxJQU1JQyxFQU5BQyxFQUFTLENBQUUsRUFHZkEsRUFBT0MsUUFBVSxRQU1qQixJQUFJQyxFQUE2QixDQUFDLEVBRzlCQyxFQUFPLFNBQVNDLEVBQU9DLEdBQzFCLE9BQU8sV0FDTixPQUFPQSxFQUFLQyxNQUFNRixFQUFPRyxVQUMxQixDQUNELEVBR0lDLEVBQVEsV0FDWCxJQUF3Q0MsRUFBS0MsRUFBekNDLEVBQU9KLFVBQVdLLEVBQVNELEVBQUssR0FDcEMsSUFBS0QsRUFBSSxFQUFHQSxFQUFJQyxFQUFLRSxPQUFRSCxJQUM1QixJQUFLRCxLQUFPRSxFQUFLRCxLQUNWRCxLQUFPRyxJQUFXRCxFQUFLRCxHQUFHSSxlQUFlTCxLQUM5Q0csRUFBT0gsR0FBT0UsRUFBS0QsR0FBR0QsSUFJekIsT0FBT0csQ0FDUixFQUdJRyxFQUFpQixTQUFTQyxFQUFPQyxHQUNwQyxNQUFPLENBQUVELE1BQU9BLEVBQU9DLEtBQU1BLEVBQzlCLEVBR0FqQixFQUFPa0IsTUFBUUgsRUFBZSxFQUFHLFNBQ2pDZixFQUFPbUIsTUFBUUosRUFBZSxFQUFHLFNBQ2pDZixFQUFPb0IsS0FBT0wsRUFBZSxFQUFHLFFBQ2hDZixFQUFPcUIsS0FBT04sRUFBZSxFQUFHLFFBQ2hDZixFQUFPc0IsS0FBT1AsRUFBZSxFQUFHLFFBQ2hDZixFQUFPdUIsTUFBUVIsRUFBZSxFQUFHLFNBQ2pDZixFQUFPd0IsSUFBTVQsRUFBZSxHQUFJLE9BSWhDLElBQUlVLEVBQW1CLFNBQVNDLEdBQy9CQyxLQUFLQyxRQUFVRixFQUNmQyxLQUFLRSxTQUFTSCxFQUFlSSxhQUM3QkgsS0FBS0ksSUFBTUosS0FBS0ssSUFDakIsRUFFQVAsRUFBaUJRLFVBQVksQ0FFNUJKLFNBQVUsU0FBVUssR0FFZkEsR0FBWSxVQUFXQSxJ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R3NWLEVBQVlDLEtBRE5uQyxFQTFDVCxFQTBDU0EsV0FBWUMsRUExQ3JCLEVBMENxQkEsZ0JBQWlCQyxFQTFDdEMsRUEwQ3NDQSxhQUFjQyxFQTFDcEQsRUEwQ29EQSxpQkFNbkRhLE9BQU9vQixpQkFBaUIsZ0JBQWdCLEtBQ3RDaEIsYUFBYWlCLFFBQVEsYUFBY3JDLEdBQ25Db0IsYUFBYWlCLFFBQVEsbUJBQW9CcEMsR0FDekNtQixhQUFhaUIsUUFBUSxnQkFBaUJuQyxHQUN0Q2tCLGFBQWFpQixRQUFRLG9CQUFxQmxDLEdBQzFDaUIsYUFBYWlCLFFBQVFsRCxFQUFtQndDLEVBQXhDLElBSUZXLFNBQVNDLFNBekRWLDJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy1sb2dnZXIvc3JjL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJleHRlbnNpb24tcG9seWZpbGwtdHMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93ZWJleHRlbnNpb24tcG9seWZpbGwtdHMvbm9kZV9tb2R1bGVzL3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC9kaXN0L2Jyb3dzZXItcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZGIta2V5dmFsL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9sb2dnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi91dGlscy9ibG9iLXRvLWJhc2U2NC51dGlsLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvdXRpbHMvY2FsY3VsYXRlLW5ldy1kaW1lbnNpb25zLnV0aWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbnRlbnRTY3JpcHQvY29udGVudC1zY3JpcHQudXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy9tZXNzYWdlLnR5cGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9leGVjdXRlLXNjcmlwdHMvbG9hZERyYXdpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qIVxyXG4gKiBqcy1sb2dnZXIgLSBodHRwOi8vZ2l0aHViLmNvbS9qb25ueXJlZXZlcy9qcy1sb2dnZXJcclxuICogSm9ubnkgUmVldmVzLCBodHRwOi8vam9ubnlyZWV2ZXMuY28udWsvXHJcbiAqIGpzLWxvZ2dlciBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuICovXHJcbihmdW5jdGlvbiAoZ2xvYmFsKSB7XHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdC8vIFRvcCBsZXZlbCBtb2R1bGUgZm9yIHRoZSBnbG9iYWwsIHN0YXRpYyBsb2dnZXIgaW5zdGFuY2UuXHJcblx0dmFyIExvZ2dlciA9IHsgfTtcclxuXHJcblx0Ly8gRm9yIHRob3NlIHRoYXQgYXJlIGF0IGhvbWUgdGhhdCBhcmUga2VlcGluZyBzY29yZS5cclxuXHRMb2dnZXIuVkVSU0lPTiA9IFwiMS42LjFcIjtcclxuXHJcblx0Ly8gRnVuY3Rpb24gd2hpY2ggaGFuZGxlcyBhbGwgaW5jb21pbmcgbG9nIG1lc3NhZ2VzLlxyXG5cdHZhciBsb2dIYW5kbGVyO1xyXG5cclxuXHQvLyBNYXAgb2YgQ29udGV4dHVhbExvZ2dlciBpbnN0YW5jZXMgYnkgbmFtZTsgdXNlZCBieSBMb2dnZXIuZ2V0KCkgdG8gcmV0dXJuIHRoZSBzYW1lIG5hbWVkIGluc3RhbmNlLlxyXG5cdHZhciBjb250ZXh0dWFsTG9nZ2Vyc0J5TmFtZU1hcCA9IHt9O1xyXG5cclxuXHQvLyBQb2x5ZmlsbCBmb3IgRVM1J3MgRnVuY3Rpb24uYmluZC5cclxuXHR2YXIgYmluZCA9IGZ1bmN0aW9uKHNjb3BlLCBmdW5jKSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBmdW5jLmFwcGx5KHNjb3BlLCBhcmd1bWVudHMpO1xyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHQvLyBTdXBlciBleGNpdGluZyBvYmplY3QgbWVyZ2VyLW1hdHJvbiA5MDAwIGFkZGluZyBhbm90aGVyIDEwMCBieXRlcyB0byB5b3VyIGRvd25sb2FkLlxyXG5cdHZhciBtZXJnZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBhcmdzID0gYXJndW1lbnRzLCB0YXJnZXQgPSBhcmdzWzBdLCBrZXksIGk7XHJcblx0XHRmb3IgKGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRmb3IgKGtleSBpbiBhcmdzW2ldKSB7XHJcblx0XHRcdFx0aWYgKCEoa2V5IGluIHRhcmdldCkgJiYgYXJnc1tpXS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0XHRcdFx0XHR0YXJnZXRba2V5XSA9IGFyZ3NbaV1ba2V5XTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblx0fTtcclxuXHJcblx0Ly8gSGVscGVyIHRvIGRlZmluZSBhIGxvZ2dpbmcgbGV2ZWwgb2JqZWN0OyBoZWxwcyB3aXRoIG9wdGltaXNhdGlvbi5cclxuXHR2YXIgZGVmaW5lTG9nTGV2ZWwgPSBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xyXG5cdFx0cmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBuYW1lOiBuYW1lIH07XHJcblx0fTtcclxuXHJcblx0Ly8gUHJlZGVmaW5lZCBsb2dnaW5nIGxldmVscy5cclxuXHRMb2dnZXIuVFJBQ0UgPSBkZWZpbmVMb2dMZXZlbCgxLCAnVFJBQ0UnKTtcclxuXHRMb2dnZXIuREVCVUcgPSBkZWZpbmVMb2dMZXZlbCgyLCAnREVCVUcnKTtcclxuXHRMb2dnZXIuSU5GTyA9IGRlZmluZUxvZ0xldmVsKDMsICdJTkZPJyk7XHJcblx0TG9nZ2VyLlRJTUUgPSBkZWZpbmVMb2dMZXZlbCg0LCAnVElNRScpO1xyXG5cdExvZ2dlci5XQVJOID0gZGVmaW5lTG9nTGV2ZWwoNSwgJ1dBUk4nKTtcclxuXHRMb2dnZXIuRVJST1IgPSBkZWZpbmVMb2dMZXZlbCg4LCAnRVJST1InKTtcclxuXHRMb2dnZXIuT0ZGID0gZGVmaW5lTG9nTGV2ZWwoOTksICdPRkYnKTtcclxuXHJcblx0Ly8gSW5uZXIgY2xhc3Mgd2hpY2ggcGVyZm9ybXMgdGhlIGJ1bGsgb2YgdGhlIHdvcms7IENvbnRleHR1YWxMb2dnZXIgaW5zdGFuY2VzIGNhbiBiZSBjb25maWd1cmVkIGluZGVwZW5kZW50bHlcclxuXHQvLyBvZiBlYWNoIG90aGVyLlxyXG5cdHZhciBDb250ZXh0dWFsTG9nZ2VyID0gZnVuY3Rpb24oZGVmYXVsdENvbnRleHQpIHtcclxuXHRcdHRoaXMuY29udGV4dCA9IGRlZmF1bHRDb250ZXh0O1xyXG5cdFx0dGhpcy5zZXRMZXZlbChkZWZhdWx0Q29udGV4dC5maWx0ZXJMZXZlbCk7XHJcblx0XHR0aGlzLmxvZyA9IHRoaXMuaW5mbzsgIC8vIENvbnZlbmllbmNlIGFsaWFzLlxyXG5cdH07XHJcblxyXG5cdENvbnRleHR1YWxMb2dnZXIucHJvdG90eXBlID0ge1xyXG5cdFx0Ly8gQ2hhbmdlcyB0aGUgY3VycmVudCBsb2dnaW5nIGxldmVsIGZvciB0aGUgbG9nZ2luZyBpbnN0YW5jZS5cclxuXHRcdHNldExldmVsOiBmdW5jdGlvbiAobmV3TGV2ZWwpIHtcclxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBzdXBwbGllZCBMZXZlbCBvYmplY3QgbG9va3MgdmFsaWQuXHJcblx0XHRcdGlmIChuZXdMZXZlbCAmJiBcInZhbHVlXCIgaW4gbmV3TGV2ZWwpIHtcclxuXHRcdFx0XHR0aGlzLmNvbnRleHQuZmlsdGVyTGV2ZWwgPSBuZXdMZXZlbDtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0Ly8gR2V0cyB0aGUgY3VycmVudCBsb2dnaW5nIGxldmVsIGZvciB0aGUgbG9nZ2luZyBpbnN0YW5jZVxyXG5cdFx0Z2V0TGV2ZWw6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY29udGV4dC5maWx0ZXJMZXZlbDtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gSXMgdGhlIGxvZ2dlciBjb25maWd1cmVkIHRvIG91dHB1dCBtZXNzYWdlcyBhdCB0aGUgc3VwcGxpZWQgbGV2ZWw/XHJcblx0XHRlbmFibGVkRm9yOiBmdW5jdGlvbiAobHZsKSB7XHJcblx0XHRcdHZhciBmaWx0ZXJMZXZlbCA9IHRoaXMuY29udGV4dC5maWx0ZXJMZXZlbDtcclxuXHRcdFx0cmV0dXJuIGx2bC52YWx1ZSA+PSBmaWx0ZXJMZXZlbC52YWx1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dHJhY2U6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dGhpcy5pbnZva2UoTG9nZ2VyLlRSQUNFLCBhcmd1bWVudHMpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRkZWJ1ZzogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR0aGlzLmludm9rZShMb2dnZXIuREVCVUcsIGFyZ3VtZW50cyk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGluZm86IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dGhpcy5pbnZva2UoTG9nZ2VyLklORk8sIGFyZ3VtZW50cyk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHdhcm46IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dGhpcy5pbnZva2UoTG9nZ2VyLldBUk4sIGFyZ3VtZW50cyk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGVycm9yOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHRoaXMuaW52b2tlKExvZ2dlci5FUlJPUiwgYXJndW1lbnRzKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dGltZTogZnVuY3Rpb24gKGxhYmVsKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnICYmIGxhYmVsLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHR0aGlzLmludm9rZShMb2dnZXIuVElNRSwgWyBsYWJlbCwgJ3N0YXJ0JyBdKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHR0aW1lRW5kOiBmdW5jdGlvbiAobGFiZWwpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBsYWJlbCA9PT0gJ3N0cmluZycgJiYgbGFiZWwubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdHRoaXMuaW52b2tlKExvZ2dlci5USU1FLCBbIGxhYmVsLCAnZW5kJyBdKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBJbnZva2VzIHRoZSBsb2dnZXIgY2FsbGJhY2sgaWYgaXQncyBub3QgYmVpbmcgZmlsdGVyZWQuXHJcblx0XHRpbnZva2U6IGZ1bmN0aW9uIChsZXZlbCwgbXNnQXJncykge1xyXG5cdFx0XHRpZiAobG9nSGFuZGxlciAmJiB0aGlzLmVuYWJsZWRGb3IobGV2ZWwpKSB7XHJcblx0XHRcdFx0bG9nSGFuZGxlcihtc2dBcmdzLCBtZXJnZSh7IGxldmVsOiBsZXZlbCB9LCB0aGlzLmNvbnRleHQpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIFByb3RlY3RlZCBpbnN0YW5jZSB3aGljaCBhbGwgY2FsbHMgdG8gdGhlIHRvIGxldmVsIGBMb2dnZXJgIG1vZHVsZSB3aWxsIGJlIHJvdXRlZCB0aHJvdWdoLlxyXG5cdHZhciBnbG9iYWxMb2dnZXIgPSBuZXcgQ29udGV4dHVhbExvZ2dlcih7IGZpbHRlckxldmVsOiBMb2dnZXIuT0ZGIH0pO1xyXG5cclxuXHQvLyBDb25maWd1cmUgdGhlIGdsb2JhbCBMb2dnZXIgaW5zdGFuY2UuXHJcblx0KGZ1bmN0aW9uKCkge1xyXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIG9wdGltaXNlcnMuXHJcblx0XHR2YXIgTCA9IExvZ2dlcjtcclxuXHJcblx0XHRMLmVuYWJsZWRGb3IgPSBiaW5kKGdsb2JhbExvZ2dlciwgZ2xvYmFsTG9nZ2VyLmVuYWJsZWRGb3IpO1xyXG5cdFx0TC50cmFjZSA9IGJpbmQoZ2xvYmFsTG9nZ2VyLCBnbG9iYWxMb2dnZXIudHJhY2UpO1xyXG5cdFx0TC5kZWJ1ZyA9IGJpbmQoZ2xvYmFsTG9nZ2VyLCBnbG9iYWxMb2dnZXIuZGVidWcpO1xyXG5cdFx0TC50aW1lID0gYmluZChnbG9iYWxMb2dnZXIsIGdsb2JhbExvZ2dlci50aW1lKTtcclxuXHRcdEwudGltZUVuZCA9IGJpbmQoZ2xvYmFsTG9nZ2VyLCBnbG9iYWxMb2dnZXIudGltZUVuZCk7XHJcblx0XHRMLmluZm8gPSBiaW5kKGdsb2JhbExvZ2dlciwgZ2xvYmFsTG9nZ2VyLmluZm8pO1xyXG5cdFx0TC53YXJuID0gYmluZChnbG9iYWxMb2dnZXIsIGdsb2JhbExvZ2dlci53YXJuKTtcclxuXHRcdEwuZXJyb3IgPSBiaW5kKGdsb2JhbExvZ2dlciwgZ2xvYmFsTG9nZ2VyLmVycm9yKTtcclxuXHJcblx0XHQvLyBEb24ndCBmb3JnZXQgdGhlIGNvbnZlbmllbmNlIGFsaWFzIVxyXG5cdFx0TC5sb2cgPSBMLmluZm87XHJcblx0fSgpKTtcclxuXHJcblx0Ly8gU2V0IHRoZSBnbG9iYWwgbG9nZ2luZyBoYW5kbGVyLiAgVGhlIHN1cHBsaWVkIGZ1bmN0aW9uIHNob3VsZCBleHBlY3QgdHdvIGFyZ3VtZW50cywgdGhlIGZpcnN0IGJlaW5nIGFuIGFyZ3VtZW50c1xyXG5cdC8vIG9iamVjdCB3aXRoIHRoZSBzdXBwbGllZCBsb2cgbWVzc2FnZXMgYW5kIHRoZSBzZWNvbmQgYmVpbmcgYSBjb250ZXh0IG9iamVjdCB3aGljaCBjb250YWlucyBhIGhhc2ggb2Ygc3RhdGVmdWxcclxuXHQvLyBwYXJhbWV0ZXJzIHdoaWNoIHRoZSBsb2dnaW5nIGZ1bmN0aW9uIGNhbiBjb25zdW1lLlxyXG5cdExvZ2dlci5zZXRIYW5kbGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuXHRcdGxvZ0hhbmRsZXIgPSBmdW5jO1xyXG5cdH07XHJcblxyXG5cdC8vIFNldHMgdGhlIGdsb2JhbCBsb2dnaW5nIGZpbHRlciBsZXZlbCB3aGljaCBhcHBsaWVzIHRvICphbGwqIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCwgYW5kIGZ1dHVyZSBMb2dnZXIgaW5zdGFuY2VzLlxyXG5cdC8vIChub3RlIHRoYXQgbmFtZWQgbG9nZ2VycyAocmV0cmlldmVkIHZpYSBgTG9nZ2VyLmdldGApIGNhbiBiZSBjb25maWd1cmVkIGluZGVwZW5kZW50bHkgaWYgcmVxdWlyZWQpLlxyXG5cdExvZ2dlci5zZXRMZXZlbCA9IGZ1bmN0aW9uKGxldmVsKSB7XHJcblx0XHQvLyBTZXQgdGhlIGdsb2JhbExvZ2dlcidzIGxldmVsLlxyXG5cdFx0Z2xvYmFsTG9nZ2VyLnNldExldmVsKGxldmVsKTtcclxuXHJcblx0XHQvLyBBcHBseSB0aGlzIGxldmVsIHRvIGFsbCByZWdpc3RlcmVkIGNvbnRleHR1YWwgbG9nZ2Vycy5cclxuXHRcdGZvciAodmFyIGtleSBpbiBjb250ZXh0dWFsTG9nZ2Vyc0J5TmFtZU1hcCkge1xyXG5cdFx0XHRpZiAoY29udGV4dHVhbExvZ2dlcnNCeU5hbWVNYXAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG5cdFx0XHRcdGNvbnRleHR1YWxMb2dnZXJzQnlOYW1lTWFwW2tleV0uc2V0TGV2ZWwobGV2ZWwpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Ly8gR2V0cyB0aGUgZ2xvYmFsIGxvZ2dpbmcgZmlsdGVyIGxldmVsXHJcblx0TG9nZ2VyLmdldExldmVsID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZ2xvYmFsTG9nZ2VyLmdldExldmVsKCk7XHJcblx0fTtcclxuXHJcblx0Ly8gUmV0cmlldmUgYSBDb250ZXh0dWFsTG9nZ2VyIGluc3RhbmNlLiAgTm90ZSB0aGF0IG5hbWVkIGxvZ2dlcnMgYXV0b21hdGljYWxseSBpbmhlcml0IHRoZSBnbG9iYWwgbG9nZ2VyJ3MgbGV2ZWwsXHJcblx0Ly8gZGVmYXVsdCBjb250ZXh0IGFuZCBsb2cgaGFuZGxlci5cclxuXHRMb2dnZXIuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuXHRcdC8vIEFsbCBsb2dnZXIgaW5zdGFuY2VzIGFyZSBjYWNoZWQgc28gdGhleSBjYW4gYmUgY29uZmlndXJlZCBhaGVhZCBvZiB1c2UuXHJcblx0XHRyZXR1cm4gY29udGV4dHVhbExvZ2dlcnNCeU5hbWVNYXBbbmFtZV0gfHxcclxuXHRcdFx0KGNvbnRleHR1YWxMb2dnZXJzQnlOYW1lTWFwW25hbWVdID0gbmV3IENvbnRleHR1YWxMb2dnZXIobWVyZ2UoeyBuYW1lOiBuYW1lIH0sIGdsb2JhbExvZ2dlci5jb250ZXh0KSkpO1xyXG5cdH07XHJcblxyXG5cdC8vIENyZWF0ZURlZmF1bHRIYW5kbGVyIHJldHVybnMgYSBoYW5kbGVyIGZ1bmN0aW9uIHdoaWNoIGNhbiBiZSBwYXNzZWQgdG8gYExvZ2dlci5zZXRIYW5kbGVyKClgIHdoaWNoIHdpbGxcclxuXHQvLyB3cml0ZSB0byB0aGUgd2luZG93J3MgY29uc29sZSBvYmplY3QgKGlmIHByZXNlbnQpOyB0aGUgb3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgY2FuIGJlIHVzZWQgdG8gY3VzdG9taXNlIHRoZVxyXG5cdC8vIGZvcm1hdHRlciB1c2VkIHRvIGZvcm1hdCBlYWNoIGxvZyBtZXNzYWdlLlxyXG5cdExvZ2dlci5jcmVhdGVEZWZhdWx0SGFuZGxlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcblx0XHRvcHRpb25zLmZvcm1hdHRlciA9IG9wdGlvbnMuZm9ybWF0dGVyIHx8IGZ1bmN0aW9uIGRlZmF1bHRNZXNzYWdlRm9ybWF0dGVyKG1lc3NhZ2VzLCBjb250ZXh0KSB7XHJcblx0XHRcdC8vIFByZXBlbmQgdGhlIGxvZ2dlcidzIG5hbWUgdG8gdGhlIGxvZyBtZXNzYWdlIGZvciBlYXN5IGlkZW50aWZpY2F0aW9uLlxyXG5cdFx0XHRpZiAoY29udGV4dC5uYW1lKSB7XHJcblx0XHRcdFx0bWVzc2FnZXMudW5zaGlmdChcIltcIiArIGNvbnRleHQubmFtZSArIFwiXVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBNYXAgb2YgdGltZXN0YW1wcyBieSB0aW1lciBsYWJlbHMgdXNlZCB0byB0cmFjayBgI3RpbWVgIGFuZCBgI3RpbWVFbmQoKWAgaW52b2NhdGlvbnMgaW4gZW52aXJvbm1lbnRzXHJcblx0XHQvLyB0aGF0IGRvbid0IG9mZmVyIGEgbmF0aXZlIGNvbnNvbGUgbWV0aG9kLlxyXG5cdFx0dmFyIHRpbWVyU3RhcnRUaW1lQnlMYWJlbE1hcCA9IHt9O1xyXG5cclxuXHRcdC8vIFN1cHBvcnQgZm9yIElFOCsgKGFuZCBvdGhlciwgc2xpZ2h0bHkgbW9yZSBzYW5lIGVudmlyb25tZW50cylcclxuXHRcdHZhciBpbnZva2VDb25zb2xlTWV0aG9kID0gZnVuY3Rpb24gKGhkbHIsIG1lc3NhZ2VzKSB7XHJcblx0XHRcdEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGhkbHIsIGNvbnNvbGUsIG1lc3NhZ2VzKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBhIGxvZ2dlci5cclxuXHRcdGlmICh0eXBlb2YgY29uc29sZSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCkgeyAvKiBubyBjb25zb2xlICovIH07XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKG1lc3NhZ2VzLCBjb250ZXh0KSB7XHJcblx0XHRcdC8vIENvbnZlcnQgYXJndW1lbnRzIG9iamVjdCB0byBBcnJheS5cclxuXHRcdFx0bWVzc2FnZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtZXNzYWdlcyk7XHJcblxyXG5cdFx0XHR2YXIgaGRsciA9IGNvbnNvbGUubG9nO1xyXG5cdFx0XHR2YXIgdGltZXJMYWJlbDtcclxuXHJcblx0XHRcdGlmIChjb250ZXh0LmxldmVsID09PSBMb2dnZXIuVElNRSkge1xyXG5cdFx0XHRcdHRpbWVyTGFiZWwgPSAoY29udGV4dC5uYW1lID8gJ1snICsgY29udGV4dC5uYW1lICsgJ10gJyA6ICcnKSArIG1lc3NhZ2VzWzBdO1xyXG5cclxuXHRcdFx0XHRpZiAobWVzc2FnZXNbMV0gPT09ICdzdGFydCcpIHtcclxuXHRcdFx0XHRcdGlmIChjb25zb2xlLnRpbWUpIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS50aW1lKHRpbWVyTGFiZWwpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRpbWVyU3RhcnRUaW1lQnlMYWJlbE1hcFt0aW1lckxhYmVsXSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdGlmIChjb25zb2xlLnRpbWVFbmQpIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS50aW1lRW5kKHRpbWVyTGFiZWwpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdGludm9rZUNvbnNvbGVNZXRob2QoaGRsciwgWyB0aW1lckxhYmVsICsgJzogJyArXHJcblx0XHRcdFx0XHRcdFx0KG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGltZXJTdGFydFRpbWVCeUxhYmVsTWFwW3RpbWVyTGFiZWxdKSArICdtcycgXSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdC8vIERlbGVnYXRlIHRocm91Z2ggdG8gY3VzdG9tIHdhcm4vZXJyb3IgbG9nZ2VycyBpZiBwcmVzZW50IG9uIHRoZSBjb25zb2xlLlxyXG5cdFx0XHRcdGlmIChjb250ZXh0LmxldmVsID09PSBMb2dnZXIuV0FSTiAmJiBjb25zb2xlLndhcm4pIHtcclxuXHRcdFx0XHRcdGhkbHIgPSBjb25zb2xlLndhcm47XHJcblx0XHRcdFx0fSBlbHNlIGlmIChjb250ZXh0LmxldmVsID09PSBMb2dnZXIuRVJST1IgJiYgY29uc29sZS5lcnJvcikge1xyXG5cdFx0XHRcdFx0aGRsciA9IGNvbnNvbGUuZXJyb3I7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChjb250ZXh0LmxldmVsID09PSBMb2dnZXIuSU5GTyAmJiBjb25zb2xlLmluZm8pIHtcclxuXHRcdFx0XHRcdGhkbHIgPSBjb25zb2xlLmluZm87XHJcblx0XHRcdFx0fSBlbHNlIGlmIChjb250ZXh0LmxldmVsID09PSBMb2dnZXIuREVCVUcgJiYgY29uc29sZS5kZWJ1Zykge1xyXG5cdFx0XHRcdFx0aGRsciA9IGNvbnNvbGUuZGVidWc7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChjb250ZXh0LmxldmVsID09PSBMb2dnZXIuVFJBQ0UgJiYgY29uc29sZS50cmFjZSkge1xyXG5cdFx0XHRcdFx0aGRsciA9IGNvbnNvbGUudHJhY2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRvcHRpb25zLmZvcm1hdHRlcihtZXNzYWdlcywgY29udGV4dCk7XHJcblx0XHRcdFx0aW52b2tlQ29uc29sZU1ldGhvZChoZGxyLCBtZXNzYWdlcyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0Ly8gQ29uZmlndXJlIGFuZCBleGFtcGxlIGEgRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB3aGljaCB3cml0ZXMgdG8gdGhlIGB3aW5kb3cuY29uc29sZWAgKGlmIHByZXNlbnQpLiAgVGhlXHJcblx0Ly8gYG9wdGlvbnNgIGhhc2ggY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBkZWZhdWx0IGxvZ0xldmVsIGFuZCBwcm92aWRlIGEgY3VzdG9tIG1lc3NhZ2UgZm9ybWF0dGVyLlxyXG5cdExvZ2dlci51c2VEZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuXHRcdExvZ2dlci5zZXRMZXZlbChvcHRpb25zICYmIG9wdGlvbnMuZGVmYXVsdExldmVsIHx8IExvZ2dlci5ERUJVRyk7XHJcblx0XHRMb2dnZXIuc2V0SGFuZGxlcihMb2dnZXIuY3JlYXRlRGVmYXVsdEhhbmRsZXIob3B0aW9ucykpO1xyXG5cdH07XHJcblxyXG5cdC8vIENyZWF0ZWEgYW4gYWxpYXMgdG8gdXNlRGVmYXVsdHMgdG8gYXZvaWQgcmVha2luZyBhIHJlYWN0LWhvb2tzIHJ1bGUuXHJcblx0TG9nZ2VyLnNldERlZmF1bHRzID0gTG9nZ2VyLnVzZURlZmF1bHRzO1xyXG5cclxuXHQvLyBFeHBvcnQgdG8gcG9wdWxhciBlbnZpcm9ubWVudHMgYm9pbGVycGxhdGUuXHJcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG5cdFx0ZGVmaW5lKExvZ2dlcik7XHJcblx0fVxyXG5cdGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IExvZ2dlcjtcclxuXHR9XHJcblx0ZWxzZSB7XHJcblx0XHRMb2dnZXIuX3ByZXZMb2dnZXIgPSBnbG9iYWwuTG9nZ2VyO1xyXG5cclxuXHRcdExvZ2dlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRnbG9iYWwuTG9nZ2VyID0gTG9nZ2VyLl9wcmV2TG9nZ2VyO1xyXG5cdFx0XHRyZXR1cm4gTG9nZ2VyO1xyXG5cdFx0fTtcclxuXHJcblx0XHRnbG9iYWwuTG9nZ2VyID0gTG9nZ2VyO1xyXG5cdH1cclxufSh0aGlzKSk7XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZXhwb3J0cy5icm93c2VyID0gcmVxdWlyZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbFwiKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbFwiLCBbXCJtb2R1bGVcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShtb2R1bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QpO1xuICAgIGdsb2JhbC5icm93c2VyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgLyogd2ViZXh0ZW5zaW9uLXBvbHlmaWxsIC0gdjAuOC4wIC0gVHVlIEFwciAyMCAyMDIxIDExOjI3OjM4ICovXG5cbiAgLyogLSotIE1vZGU6IGluZGVudC10YWJzLW1vZGU6IG5pbDsganMtaW5kZW50LWxldmVsOiAyIC0qLSAqL1xuXG4gIC8qIHZpbTogc2V0IHN0cz0yIHN3PTIgZXQgdHc9ODA6ICovXG5cbiAgLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICAgKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gICAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICh0eXBlb2YgYnJvd3NlciA9PT0gXCJ1bmRlZmluZWRcIiB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYnJvd3NlcikgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICBjb25zdCBDSFJPTUVfU0VORF9NRVNTQUdFX0NBTExCQUNLX05PX1JFU1BPTlNFX01FU1NBR0UgPSBcIlRoZSBtZXNzYWdlIHBvcnQgY2xvc2VkIGJlZm9yZSBhIHJlc3BvbnNlIHdhcyByZWNlaXZlZC5cIjtcbiAgICBjb25zdCBTRU5EX1JFU1BPTlNFX0RFUFJFQ0FUSU9OX1dBUk5JTkcgPSBcIlJldHVybmluZyBhIFByb21pc2UgaXMgdGhlIHByZWZlcnJlZCB3YXkgdG8gc2VuZCBhIHJlcGx5IGZyb20gYW4gb25NZXNzYWdlL29uTWVzc2FnZUV4dGVybmFsIGxpc3RlbmVyLCBhcyB0aGUgc2VuZFJlc3BvbnNlIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBzcGVjcyAoU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvTW96aWxsYS9BZGQtb25zL1dlYkV4dGVuc2lvbnMvQVBJL3J1bnRpbWUvb25NZXNzYWdlKVwiOyAvLyBXcmFwcGluZyB0aGUgYnVsayBvZiB0aGlzIHBvbHlmaWxsIGluIGEgb25lLXRpbWUtdXNlIGZ1bmN0aW9uIGlzIGEgbWlub3JcbiAgICAvLyBvcHRpbWl6YXRpb24gZm9yIEZpcmVmb3guIFNpbmNlIFNwaWRlcm1vbmtleSBkb2VzIG5vdCBmdWxseSBwYXJzZSB0aGVcbiAgICAvLyBjb250ZW50cyBvZiBhIGZ1bmN0aW9uIHVudGlsIHRoZSBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgc2luY2UgaXQgd2lsbFxuICAgIC8vIG5ldmVyIGFjdHVhbGx5IG5lZWQgdG8gYmUgY2FsbGVkLCB0aGlzIGFsbG93cyB0aGUgcG9seWZpbGwgdG8gYmUgaW5jbHVkZWRcbiAgICAvLyBpbiBGaXJlZm94IG5lYXJseSBmb3IgZnJlZS5cblxuICAgIGNvbnN0IHdyYXBBUElzID0gZXh0ZW5zaW9uQVBJcyA9PiB7XG4gICAgICAvLyBOT1RFOiBhcGlNZXRhZGF0YSBpcyBhc3NvY2lhdGVkIHRvIHRoZSBjb250ZW50IG9mIHRoZSBhcGktbWV0YWRhdGEuanNvbiBmaWxlXG4gICAgICAvLyBhdCBidWlsZCB0aW1lIGJ5IHJlcGxhY2luZyB0aGUgZm9sbG93aW5nIFwiaW5jbHVkZVwiIHdpdGggdGhlIGNvbnRlbnQgb2YgdGhlXG4gICAgICAvLyBKU09OIGZpbGUuXG4gICAgICBjb25zdCBhcGlNZXRhZGF0YSA9IHtcbiAgICAgICAgXCJhbGFybXNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjbGVhckFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJvb2ttYXJrc1wiOiB7XG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDaGlsZHJlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFJlY2VudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFN1YlRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRUcmVlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJicm93c2VyQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImRpc2FibGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlbmFibGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEJhZGdlVGV4dFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJvcGVuUG9wdXBcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEJhZGdlVGV4dFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEljb25cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYnJvd3NpbmdEYXRhXCI6IHtcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUNhY2hlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ29va2llc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZURvd25sb2Fkc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUZvcm1EYXRhXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlSGlzdG9yeVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUxvY2FsU3RvcmFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVBhc3N3b3Jkc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVBsdWdpbkRhdGFcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXR0aW5nc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvbW1hbmRzXCI6IHtcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvbnRleHRNZW51c1wiOiB7XG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb29raWVzXCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbENvb2tpZVN0b3Jlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRldnRvb2xzXCI6IHtcbiAgICAgICAgICBcImluc3BlY3RlZFdpbmRvd1wiOiB7XG4gICAgICAgICAgICBcImV2YWxcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDIsXG4gICAgICAgICAgICAgIFwic2luZ2xlQ2FsbGJhY2tBcmdcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFuZWxzXCI6IHtcbiAgICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDMsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzLFxuICAgICAgICAgICAgICBcInNpbmdsZUNhbGxiYWNrQXJnXCI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVsZW1lbnRzXCI6IHtcbiAgICAgICAgICAgICAgXCJjcmVhdGVTaWRlYmFyUGFuZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb3dubG9hZHNcIjoge1xuICAgICAgICAgIFwiY2FuY2VsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZG93bmxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlcmFzZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZpbGVJY29uXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib3BlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhdXNlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRmlsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc3VtZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlYXJjaFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNob3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJleHRlbnNpb25cIjoge1xuICAgICAgICAgIFwiaXNBbGxvd2VkRmlsZVNjaGVtZUFjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlzQWxsb3dlZEluY29nbml0b0FjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImhpc3RvcnlcIjoge1xuICAgICAgICAgIFwiYWRkVXJsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlUmFuZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZWxldGVVcmxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRWaXNpdHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpMThuXCI6IHtcbiAgICAgICAgICBcImRldGVjdExhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWNjZXB0TGFuZ3VhZ2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRlbnRpdHlcIjoge1xuICAgICAgICAgIFwibGF1bmNoV2ViQXV0aEZsb3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpZGxlXCI6IHtcbiAgICAgICAgICBcInF1ZXJ5U3RhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtYW5hZ2VtZW50XCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFNlbGZcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRFbmFibGVkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidW5pbnN0YWxsU2VsZlwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm5vdGlmaWNhdGlvbnNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQZXJtaXNzaW9uTGV2ZWxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYWdlQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0SWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzaG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGVybWlzc2lvbnNcIjoge1xuICAgICAgICAgIFwiY29udGFpbnNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXF1ZXN0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicnVudGltZVwiOiB7XG4gICAgICAgICAgXCJnZXRCYWNrZ3JvdW5kUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFBsYXRmb3JtSW5mb1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5PcHRpb25zUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlcXVlc3RVcGRhdGVDaGVja1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbmRNZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDNcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VuZE5hdGl2ZU1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRVbmluc3RhbGxVUkxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXNzaW9uc1wiOiB7XG4gICAgICAgICAgXCJnZXREZXZpY2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UmVjZW50bHlDbG9zZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXN0b3JlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic3RvcmFnZVwiOiB7XG4gICAgICAgICAgXCJsb2NhbFwiOiB7XG4gICAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1hbmFnZWRcIjoge1xuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3luY1wiOiB7XG4gICAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInRhYnNcIjoge1xuICAgICAgICAgIFwiY2FwdHVyZVZpc2libGVUYWJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXRlY3RMYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRpc2NhcmRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkdXBsaWNhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleGVjdXRlU2NyaXB0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q3VycmVudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFpvb21cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnb0JhY2tcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnb0ZvcndhcmRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWdobGlnaHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbnNlcnRDU1NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicXVlcnlcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZWxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVDU1NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZW5kTWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFpvb21cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3BTaXRlc1wiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWJOYXZpZ2F0aW9uXCI6IHtcbiAgICAgICAgICBcImdldEFsbEZyYW1lc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZyYW1lXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2ViUmVxdWVzdFwiOiB7XG4gICAgICAgICAgXCJoYW5kbGVyQmVoYXZpb3JDaGFuZ2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2luZG93c1wiOiB7XG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDdXJyZW50XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0TGFzdEZvY3VzZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKE9iamVjdC5rZXlzKGFwaU1ldGFkYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXBpLW1ldGFkYXRhLmpzb24gaGFzIG5vdCBiZWVuIGluY2x1ZGVkIGluIGJyb3dzZXItcG9seWZpbGxcIik7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEEgV2Vha01hcCBzdWJjbGFzcyB3aGljaCBjcmVhdGVzIGFuZCBzdG9yZXMgYSB2YWx1ZSBmb3IgYW55IGtleSB3aGljaCBkb2VzXG4gICAgICAgKiBub3QgZXhpc3Qgd2hlbiBhY2Nlc3NlZCwgYnV0IGJlaGF2ZXMgZXhhY3RseSBhcyBhbiBvcmRpbmFyeSBXZWFrTWFwXG4gICAgICAgKiBvdGhlcndpc2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY3JlYXRlSXRlbVxuICAgICAgICogICAgICAgIEEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgaW4gb3JkZXIgdG8gY3JlYXRlIHRoZSB2YWx1ZSBmb3IgYW55XG4gICAgICAgKiAgICAgICAga2V5IHdoaWNoIGRvZXMgbm90IGV4aXN0LCB0aGUgZmlyc3QgdGltZSBpdCBpcyBhY2Nlc3NlZC4gVGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24gcmVjZWl2ZXMsIGFzIGl0cyBvbmx5IGFyZ3VtZW50LCB0aGUga2V5IGJlaW5nIGNyZWF0ZWQuXG4gICAgICAgKi9cblxuXG4gICAgICBjbGFzcyBEZWZhdWx0V2Vha01hcCBleHRlbmRzIFdlYWtNYXAge1xuICAgICAgICBjb25zdHJ1Y3RvcihjcmVhdGVJdGVtLCBpdGVtcyA9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN1cGVyKGl0ZW1zKTtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUl0ZW0gPSBjcmVhdGVJdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0KGtleSkge1xuICAgICAgICAgIGlmICghdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB0aGlzLmNyZWF0ZUl0ZW0oa2V5KSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgYW4gb2JqZWN0IHdpdGggYSBgdGhlbmAgbWV0aG9kLCBhbmQgY2FuXG4gICAgICAgKiB0aGVyZWZvcmUgYmUgYXNzdW1lZCB0byBiZWhhdmUgYXMgYSBQcm9taXNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QuXG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdGhlbmFibGUuXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCBpc1RoZW5hYmxlID0gdmFsdWUgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gY2FsbGVkLCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0XG4gICAgICAgKiB0aGUgZ2l2ZW4gcHJvbWlzZSBiYXNlZCBvbiBob3cgaXQgaXMgY2FsbGVkOlxuICAgICAgICpcbiAgICAgICAqIC0gSWYsIHdoZW4gY2FsbGVkLCBgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yYCBjb250YWlucyBhIG5vbi1udWxsIG9iamVjdCxcbiAgICAgICAqICAgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCB0aGF0IHZhbHVlLlxuICAgICAgICogLSBJZiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggZXhhY3RseSBvbmUgYXJndW1lbnQsIHRoZSBwcm9taXNlIGlzXG4gICAgICAgKiAgIHJlc29sdmVkIHRvIHRoYXQgdmFsdWUuXG4gICAgICAgKiAtIE90aGVyd2lzZSwgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgdG8gYW4gYXJyYXkgY29udGFpbmluZyBhbGwgb2YgdGhlXG4gICAgICAgKiAgIGZ1bmN0aW9uJ3MgYXJndW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9taXNlXG4gICAgICAgKiAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc29sdXRpb24gYW5kIHJlamVjdGlvbiBmdW5jdGlvbnMgb2YgYVxuICAgICAgICogICAgICAgIHByb21pc2UuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9taXNlLnJlc29sdmVcbiAgICAgICAqICAgICAgICBUaGUgcHJvbWlzZSdzIHJlc29sdXRpb24gZnVuY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9taXNlLnJlamVjdFxuICAgICAgICogICAgICAgIFRoZSBwcm9taXNlJ3MgcmVqZWN0aW9uIGZ1bmN0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgTWV0YWRhdGEgYWJvdXQgdGhlIHdyYXBwZWQgbWV0aG9kIHdoaWNoIGhhcyBjcmVhdGVkIHRoZSBjYWxsYmFjay5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmdcbiAgICAgICAqICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIG9ubHkgdGhlIGZpcnN0XG4gICAgICAgKiAgICAgICAgYXJndW1lbnQgb2YgdGhlIGNhbGxiYWNrLCBhbHRlcm5hdGl2ZWx5IGFuIGFycmF5IG9mIGFsbCB0aGVcbiAgICAgICAqICAgICAgICBjYWxsYmFjayBhcmd1bWVudHMgaXMgcmVzb2x2ZWQuIEJ5IGRlZmF1bHQsIGlmIHRoZSBjYWxsYmFja1xuICAgICAgICogICAgICAgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBvbmx5IGEgc2luZ2xlIGFyZ3VtZW50LCB0aGF0IHdpbGwgYmVcbiAgICAgICAqICAgICAgICByZXNvbHZlZCB0byB0aGUgcHJvbWlzZSwgd2hpbGUgYWxsIGFyZ3VtZW50cyB3aWxsIGJlIHJlc29sdmVkIGFzXG4gICAgICAgKiAgICAgICAgYW4gYXJyYXkgaWYgbXVsdGlwbGUgYXJlIGdpdmVuLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAgICAgICAqICAgICAgICBUaGUgZ2VuZXJhdGVkIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3QgbWFrZUNhbGxiYWNrID0gKHByb21pc2UsIG1ldGFkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiAoLi4uY2FsbGJhY2tBcmdzKSA9PiB7XG4gICAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVqZWN0KG5ldyBFcnJvcihleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLnNpbmdsZUNhbGxiYWNrQXJnIHx8IGNhbGxiYWNrQXJncy5sZW5ndGggPD0gMSAmJiBtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShjYWxsYmFja0FyZ3NbMF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2tBcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBwbHVyYWxpemVBcmd1bWVudHMgPSBudW1BcmdzID0+IG51bUFyZ3MgPT0gMSA/IFwiYXJndW1lbnRcIiA6IFwiYXJndW1lbnRzXCI7XG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSB3cmFwcGVyIGZ1bmN0aW9uIGZvciBhIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lIGFuZCBtZXRhZGF0YS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAgICogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBtZXRob2Qgd2hpY2ggaXMgYmVpbmcgd3JhcHBlZC5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhZGF0YVxuICAgICAgICogICAgICAgIE1ldGFkYXRhIGFib3V0IHRoZSBtZXRob2QgYmVpbmcgd3JhcHBlZC5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWluQXJnc1xuICAgICAgICogICAgICAgIFRoZSBtaW5pbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbXVzdCBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24uIElmIGNhbGxlZCB3aXRoIGZld2VyIHRoYW4gdGhpcyBudW1iZXIgb2YgYXJndW1lbnRzLCB0aGVcbiAgICAgICAqICAgICAgICB3cmFwcGVyIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uLlxuICAgICAgICogQHBhcmFtIHtpbnRlZ2VyfSBtZXRhZGF0YS5tYXhBcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtYXkgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uLiBJZiBjYWxsZWQgd2l0aCBtb3JlIHRoYW4gdGhpcyBudW1iZXIgb2YgYXJndW1lbnRzLCB0aGVcbiAgICAgICAqICAgICAgICB3cmFwcGVyIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZ1xuICAgICAgICogICAgICAgIFdoZXRoZXIgb3Igbm90IHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggb25seSB0aGUgZmlyc3RcbiAgICAgICAqICAgICAgICBhcmd1bWVudCBvZiB0aGUgY2FsbGJhY2ssIGFsdGVybmF0aXZlbHkgYW4gYXJyYXkgb2YgYWxsIHRoZVxuICAgICAgICogICAgICAgIGNhbGxiYWNrIGFyZ3VtZW50cyBpcyByZXNvbHZlZC4gQnkgZGVmYXVsdCwgaWYgdGhlIGNhbGxiYWNrXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIG9ubHkgYSBzaW5nbGUgYXJndW1lbnQsIHRoYXQgd2lsbCBiZVxuICAgICAgICogICAgICAgIHJlc29sdmVkIHRvIHRoZSBwcm9taXNlLCB3aGlsZSBhbGwgYXJndW1lbnRzIHdpbGwgYmUgcmVzb2x2ZWQgYXNcbiAgICAgICAqICAgICAgICBhbiBhcnJheSBpZiBtdWx0aXBsZSBhcmUgZ2l2ZW4uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKG9iamVjdCwgLi4uKil9XG4gICAgICAgKiAgICAgICBUaGUgZ2VuZXJhdGVkIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCB3cmFwQXN5bmNGdW5jdGlvbiA9IChuYW1lLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYXN5bmNGdW5jdGlvbldyYXBwZXIodGFyZ2V0LCAuLi5hcmdzKSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgbWV0YWRhdGEubWluQXJncykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiBtZXRhZGF0YS5tYXhBcmdzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyBUaGlzIEFQSSBtZXRob2QgaGFzIGN1cnJlbnRseSBubyBjYWxsYmFjayBvbiBDaHJvbWUsIGJ1dCBpdCByZXR1cm4gYSBwcm9taXNlIG9uIEZpcmVmb3gsXG4gICAgICAgICAgICAgIC8vIGFuZCBzbyB0aGUgcG9seWZpbGwgd2lsbCB0cnkgdG8gY2FsbCBpdCB3aXRoIGEgY2FsbGJhY2sgZmlyc3QsIGFuZCBpdCB3aWxsIGZhbGxiYWNrXG4gICAgICAgICAgICAgIC8vIHRvIG5vdCBwYXNzaW5nIHRoZSBjYWxsYmFjayBpZiB0aGUgZmlyc3QgY2FsbCBmYWlscy5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncywgbWFrZUNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICAgICAgICByZWplY3RcbiAgICAgICAgICAgICAgICB9LCBtZXRhZGF0YSkpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChjYkVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke25hbWV9IEFQSSBtZXRob2QgZG9lc24ndCBzZWVtIHRvIHN1cHBvcnQgdGhlIGNhbGxiYWNrIHBhcmFtZXRlciwgYCArIFwiZmFsbGluZyBiYWNrIHRvIGNhbGwgaXQgd2l0aG91dCBhIGNhbGxiYWNrOiBcIiwgY2JFcnJvcik7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MpOyAvLyBVcGRhdGUgdGhlIEFQSSBtZXRob2QgbWV0YWRhdGEsIHNvIHRoYXQgdGhlIG5leHQgQVBJIGNhbGxzIHdpbGwgbm90IHRyeSB0b1xuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgdW5zdXBwb3J0ZWQgY2FsbGJhY2sgYW55bW9yZS5cblxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLmZhbGxiYWNrVG9Ob0NhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEubm9DYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLm5vQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncywgbWFrZUNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgICAgICB9LCBtZXRhZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgYW4gZXhpc3RpbmcgbWV0aG9kIG9mIHRoZSB0YXJnZXQgb2JqZWN0LCBzbyB0aGF0IGNhbGxzIHRvIGl0IGFyZVxuICAgICAgICogaW50ZXJjZXB0ZWQgYnkgdGhlIGdpdmVuIHdyYXBwZXIgZnVuY3Rpb24uIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHJlY2VpdmVzLFxuICAgICAgICogYXMgaXRzIGZpcnN0IGFyZ3VtZW50LCB0aGUgb3JpZ2luYWwgYHRhcmdldGAgb2JqZWN0LCBmb2xsb3dlZCBieSBlYWNoIG9mXG4gICAgICAgKiB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgb3JpZ2luYWwgbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgICAqICAgICAgICBUaGUgb3JpZ2luYWwgdGFyZ2V0IG9iamVjdCB0aGF0IHRoZSB3cmFwcGVkIG1ldGhvZCBiZWxvbmdzIHRvLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kXG4gICAgICAgKiAgICAgICAgVGhlIG1ldGhvZCBiZWluZyB3cmFwcGVkLiBUaGlzIGlzIHVzZWQgYXMgdGhlIHRhcmdldCBvZiB0aGUgUHJveHlcbiAgICAgICAqICAgICAgICBvYmplY3Qgd2hpY2ggaXMgY3JlYXRlZCB0byB3cmFwIHRoZSBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgVGhlIHdyYXBwZXIgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGluIHBsYWNlIG9mIGEgZGlyZWN0IGludm9jYXRpb25cbiAgICAgICAqICAgICAgICBvZiB0aGUgd3JhcHBlZCBtZXRob2QuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1Byb3h5PGZ1bmN0aW9uPn1cbiAgICAgICAqICAgICAgICBBIFByb3h5IG9iamVjdCBmb3IgdGhlIGdpdmVuIG1ldGhvZCwgd2hpY2ggaW52b2tlcyB0aGUgZ2l2ZW4gd3JhcHBlclxuICAgICAgICogICAgICAgIG1ldGhvZCBpbiBpdHMgcGxhY2UuXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCB3cmFwTWV0aG9kID0gKHRhcmdldCwgbWV0aG9kLCB3cmFwcGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkobWV0aG9kLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0TWV0aG9kLCB0aGlzT2JqLCBhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5jYWxsKHRoaXNPYmosIHRhcmdldCwgLi4uYXJncyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgbGV0IGhhc093blByb3BlcnR5ID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuICAgICAgLyoqXG4gICAgICAgKiBXcmFwcyBhbiBvYmplY3QgaW4gYSBQcm94eSB3aGljaCBpbnRlcmNlcHRzIGFuZCB3cmFwcyBjZXJ0YWluIG1ldGhvZHNcbiAgICAgICAqIGJhc2VkIG9uIHRoZSBnaXZlbiBgd3JhcHBlcnNgIGFuZCBgbWV0YWRhdGFgIG9iamVjdHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldFxuICAgICAgICogICAgICAgIFRoZSB0YXJnZXQgb2JqZWN0IHRvIHdyYXAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IFt3cmFwcGVycyA9IHt9XVxuICAgICAgICogICAgICAgIEFuIG9iamVjdCB0cmVlIGNvbnRhaW5pbmcgd3JhcHBlciBmdW5jdGlvbnMgZm9yIHNwZWNpYWwgY2FzZXMuIEFueVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uIHByZXNlbnQgaW4gdGhpcyBvYmplY3QgdHJlZSBpcyBjYWxsZWQgaW4gcGxhY2Ugb2YgdGhlXG4gICAgICAgKiAgICAgICAgbWV0aG9kIGluIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBgdGFyZ2V0YCBvYmplY3QgdHJlZS4gVGhlc2VcbiAgICAgICAqICAgICAgICB3cmFwcGVyIG1ldGhvZHMgYXJlIGludm9rZWQgYXMgZGVzY3JpYmVkIGluIHtAc2VlIHdyYXBNZXRob2R9LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbbWV0YWRhdGEgPSB7fV1cbiAgICAgICAqICAgICAgICBBbiBvYmplY3QgdHJlZSBjb250YWluaW5nIG1ldGFkYXRhIHVzZWQgdG8gYXV0b21hdGljYWxseSBnZW5lcmF0ZVxuICAgICAgICogICAgICAgIFByb21pc2UtYmFzZWQgd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFzeW5jaHJvbm91cy4gQW55IGZ1bmN0aW9uIGluXG4gICAgICAgKiAgICAgICAgdGhlIGB0YXJnZXRgIG9iamVjdCB0cmVlIHdoaWNoIGhhcyBhIGNvcnJlc3BvbmRpbmcgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiAgICAgICAgaW4gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIGBtZXRhZGF0YWAgdHJlZSBpcyByZXBsYWNlZCB3aXRoIGFuXG4gICAgICAgKiAgICAgICAgYXV0b21hdGljYWxseS1nZW5lcmF0ZWQgd3JhcHBlciBmdW5jdGlvbiwgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgKiAgICAgICAge0BzZWUgd3JhcEFzeW5jRnVuY3Rpb259XG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1Byb3h5PG9iamVjdD59XG4gICAgICAgKi9cblxuICAgICAgY29uc3Qgd3JhcE9iamVjdCA9ICh0YXJnZXQsIHdyYXBwZXJzID0ge30sIG1ldGFkYXRhID0ge30pID0+IHtcbiAgICAgICAgbGV0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0ge1xuICAgICAgICAgIGhhcyhwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0IHx8IHByb3AgaW4gY2FjaGU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGdldChwcm94eVRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGNhY2hlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEocHJvcCBpbiB0YXJnZXQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBtZXRob2Qgb24gdGhlIHVuZGVybHlpbmcgb2JqZWN0LiBDaGVjayBpZiB3ZSBuZWVkIHRvIGRvXG4gICAgICAgICAgICAgIC8vIGFueSB3cmFwcGluZy5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3cmFwcGVyc1twcm9wXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIHNwZWNpYWwtY2FzZSB3cmFwcGVyIGZvciB0aGlzIG1ldGhvZC5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBNZXRob2QodGFyZ2V0LCB0YXJnZXRbcHJvcF0sIHdyYXBwZXJzW3Byb3BdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFzeW5jIG1ldGhvZCB0aGF0IHdlIGhhdmUgbWV0YWRhdGEgZm9yLiBDcmVhdGUgYVxuICAgICAgICAgICAgICAgIC8vIFByb21pc2Ugd3JhcHBlciBmb3IgaXQuXG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXIgPSB3cmFwQXN5bmNGdW5jdGlvbihwcm9wLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwTWV0aG9kKHRhcmdldCwgdGFyZ2V0W3Byb3BdLCB3cmFwcGVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbWV0aG9kIHRoYXQgd2UgZG9uJ3Qga25vdyBvciBjYXJlIGFib3V0LiBSZXR1cm4gdGhlXG4gICAgICAgICAgICAgICAgLy8gb3JpZ2luYWwgbWV0aG9kLCBib3VuZCB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmIChoYXNPd25Qcm9wZXJ0eSh3cmFwcGVycywgcHJvcCkgfHwgaGFzT3duUHJvcGVydHkobWV0YWRhdGEsIHByb3ApKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIG9iamVjdCB0aGF0IHdlIG5lZWQgdG8gZG8gc29tZSB3cmFwcGluZyBmb3IgdGhlIGNoaWxkcmVuXG4gICAgICAgICAgICAgIC8vIG9mLiBDcmVhdGUgYSBzdWItb2JqZWN0IHdyYXBwZXIgZm9yIGl0IHdpdGggdGhlIGFwcHJvcHJpYXRlIGNoaWxkXG4gICAgICAgICAgICAgIC8vIG1ldGFkYXRhLlxuICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBPYmplY3QodmFsdWUsIHdyYXBwZXJzW3Byb3BdLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhc093blByb3BlcnR5KG1ldGFkYXRhLCBcIipcIikpIHtcbiAgICAgICAgICAgICAgLy8gV3JhcCBhbGwgcHJvcGVydGllcyBpbiAqIG5hbWVzcGFjZS5cbiAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwT2JqZWN0KHZhbHVlLCB3cmFwcGVyc1twcm9wXSwgbWV0YWRhdGFbXCIqXCJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZG8gYW55IHdyYXBwaW5nIGZvciB0aGlzIHByb3BlcnR5LFxuICAgICAgICAgICAgICAvLyBzbyBqdXN0IGZvcndhcmQgYWxsIGFjY2VzcyB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYWNoZSwgcHJvcCwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc2V0KHByb3h5VGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGNhY2hlKSB7XG4gICAgICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHByb3h5VGFyZ2V0LCBwcm9wLCBkZXNjKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShjYWNoZSwgcHJvcCwgZGVzYyk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlbGV0ZVByb3BlcnR5KHByb3h5VGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShjYWNoZSwgcHJvcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH07IC8vIFBlciBjb250cmFjdCBvZiB0aGUgUHJveHkgQVBJLCB0aGUgXCJnZXRcIiBwcm94eSBoYW5kbGVyIG11c3QgcmV0dXJuIHRoZVxuICAgICAgICAvLyBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgdGFyZ2V0IGlmIHRoYXQgdmFsdWUgaXMgZGVjbGFyZWQgcmVhZC1vbmx5IGFuZFxuICAgICAgICAvLyBub24tY29uZmlndXJhYmxlLiBGb3IgdGhpcyByZWFzb24sIHdlIGNyZWF0ZSBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgICAgLy8gcHJvdG90eXBlIHNldCB0byBgdGFyZ2V0YCBpbnN0ZWFkIG9mIHVzaW5nIGB0YXJnZXRgIGRpcmVjdGx5LlxuICAgICAgICAvLyBPdGhlcndpc2Ugd2UgY2Fubm90IHJldHVybiBhIGN1c3RvbSBvYmplY3QgZm9yIEFQSXMgdGhhdFxuICAgICAgICAvLyBhcmUgZGVjbGFyZWQgcmVhZC1vbmx5IGFuZCBub24tY29uZmlndXJhYmxlLCBzdWNoIGFzIGBjaHJvbWUuZGV2dG9vbHNgLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGUgcHJveHkgaGFuZGxlcnMgdGhlbXNlbHZlcyB3aWxsIHN0aWxsIHVzZSB0aGUgb3JpZ2luYWwgYHRhcmdldGBcbiAgICAgICAgLy8gaW5zdGVhZCBvZiB0aGUgYHByb3h5VGFyZ2V0YCwgc28gdGhhdCB0aGUgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBhcmVcbiAgICAgICAgLy8gZGVyZWZlcmVuY2VkIHZpYSB0aGUgb3JpZ2luYWwgdGFyZ2V0cy5cblxuICAgICAgICBsZXQgcHJveHlUYXJnZXQgPSBPYmplY3QuY3JlYXRlKHRhcmdldCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkocHJveHlUYXJnZXQsIGhhbmRsZXJzKTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSBzZXQgb2Ygd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFuIGV2ZW50IG9iamVjdCwgd2hpY2ggaGFuZGxlc1xuICAgICAgICogd3JhcHBpbmcgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRoYXQgdGhvc2UgbWVzc2FnZXMgYXJlIHBhc3NlZC5cbiAgICAgICAqXG4gICAgICAgKiBBIHNpbmdsZSB3cmFwcGVyIGlzIGNyZWF0ZWQgZm9yIGVhY2ggbGlzdGVuZXIgZnVuY3Rpb24sIGFuZCBzdG9yZWQgaW4gYVxuICAgICAgICogbWFwLiBTdWJzZXF1ZW50IGNhbGxzIHRvIGBhZGRMaXN0ZW5lcmAsIGBoYXNMaXN0ZW5lcmAsIG9yIGByZW1vdmVMaXN0ZW5lcmBcbiAgICAgICAqIHJldHJpZXZlIHRoZSBvcmlnaW5hbCB3cmFwcGVyLCBzbyB0aGF0ICBhdHRlbXB0cyB0byByZW1vdmUgYVxuICAgICAgICogcHJldmlvdXNseS1hZGRlZCBsaXN0ZW5lciB3b3JrIGFzIGV4cGVjdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RGVmYXVsdFdlYWtNYXA8ZnVuY3Rpb24sIGZ1bmN0aW9uPn0gd3JhcHBlck1hcFxuICAgICAgICogICAgICAgIEEgRGVmYXVsdFdlYWtNYXAgb2JqZWN0IHdoaWNoIHdpbGwgY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgZm9yIGEgZ2l2ZW4gbGlzdGVuZXIgZnVuY3Rpb24gd2hlbiBvbmUgZG9lcyBub3QgZXhpc3QsIGFuZCByZXRyaWV2ZVxuICAgICAgICogICAgICAgIGFuIGV4aXN0aW5nIG9uZSB3aGVuIGl0IGRvZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgICAqL1xuXG5cbiAgICAgIGNvbnN0IHdyYXBFdmVudCA9IHdyYXBwZXJNYXAgPT4gKHtcbiAgICAgICAgYWRkTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lciwgLi4uYXJncykge1xuICAgICAgICAgIHRhcmdldC5hZGRMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lciksIC4uLmFyZ3MpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc0xpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0Lmhhc0xpc3RlbmVyKHdyYXBwZXJNYXAuZ2V0KGxpc3RlbmVyKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lcikge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lcikpO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBvblJlcXVlc3RGaW5pc2hlZFdyYXBwZXJzID0gbmV3IERlZmF1bHRXZWFrTWFwKGxpc3RlbmVyID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXcmFwcyBhbiBvblJlcXVlc3RGaW5pc2hlZCBsaXN0ZW5lciBmdW5jdGlvbiBzbyB0aGF0IGl0IHdpbGwgcmV0dXJuIGFcbiAgICAgICAgICogYGdldENvbnRlbnQoKWAgcHJvcGVydHkgd2hpY2ggcmV0dXJucyBhIGBQcm9taXNlYCByYXRoZXIgdGhhbiB1c2luZyBhXG4gICAgICAgICAqIGNhbGxiYWNrIEFQSS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHJlcVxuICAgICAgICAgKiAgICAgICAgVGhlIEhBUiBlbnRyeSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBuZXR3b3JrIHJlcXVlc3QuXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG9uUmVxdWVzdEZpbmlzaGVkKHJlcSkge1xuICAgICAgICAgIGNvbnN0IHdyYXBwZWRSZXEgPSB3cmFwT2JqZWN0KHJlcSwge31cbiAgICAgICAgICAvKiB3cmFwcGVycyAqL1xuICAgICAgICAgICwge1xuICAgICAgICAgICAgZ2V0Q29udGVudDoge1xuICAgICAgICAgICAgICBtaW5BcmdzOiAwLFxuICAgICAgICAgICAgICBtYXhBcmdzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGlzdGVuZXIod3JhcHBlZFJlcSk7XG4gICAgICAgIH07XG4gICAgICB9KTsgLy8gS2VlcCB0cmFjayBpZiB0aGUgZGVwcmVjYXRpb24gd2FybmluZyBoYXMgYmVlbiBsb2dnZWQgYXQgbGVhc3Qgb25jZS5cblxuICAgICAgbGV0IGxvZ2dlZFNlbmRSZXNwb25zZURlcHJlY2F0aW9uV2FybmluZyA9IGZhbHNlO1xuICAgICAgY29uc3Qgb25NZXNzYWdlV3JhcHBlcnMgPSBuZXcgRGVmYXVsdFdlYWtNYXAobGlzdGVuZXIgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdGVuZXI7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdyYXBzIGEgbWVzc2FnZSBsaXN0ZW5lciBmdW5jdGlvbiBzbyB0aGF0IGl0IG1heSBzZW5kIHJlc3BvbnNlcyBiYXNlZCBvblxuICAgICAgICAgKiBpdHMgcmV0dXJuIHZhbHVlLCByYXRoZXIgdGhhbiBieSByZXR1cm5pbmcgYSBzZW50aW5lbCB2YWx1ZSBhbmQgY2FsbGluZyBhXG4gICAgICAgICAqIGNhbGxiYWNrLiBJZiB0aGUgbGlzdGVuZXIgZnVuY3Rpb24gcmV0dXJucyBhIFByb21pc2UsIHRoZSByZXNwb25zZSBpc1xuICAgICAgICAgKiBzZW50IHdoZW4gdGhlIHByb21pc2UgZWl0aGVyIHJlc29sdmVzIG9yIHJlamVjdHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gbWVzc2FnZVxuICAgICAgICAgKiAgICAgICAgVGhlIG1lc3NhZ2Ugc2VudCBieSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjaGFubmVsLlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2VuZGVyXG4gICAgICAgICAqICAgICAgICBEZXRhaWxzIGFib3V0IHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IHNlbmRSZXNwb25zZVxuICAgICAgICAgKiAgICAgICAgQSBjYWxsYmFjayB3aGljaCwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcmJpdHJhcnkgYXJndW1lbnQsIHNlbmRzXG4gICAgICAgICAqICAgICAgICB0aGF0IHZhbHVlIGFzIGEgcmVzcG9uc2UuXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKiAgICAgICAgVHJ1ZSBpZiB0aGUgd3JhcHBlZCBsaXN0ZW5lciByZXR1cm5lZCBhIFByb21pc2UsIHdoaWNoIHdpbGwgbGF0ZXJcbiAgICAgICAgICogICAgICAgIHlpZWxkIGEgcmVzcG9uc2UuIEZhbHNlIG90aGVyd2lzZS5cbiAgICAgICAgICovXG5cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gb25NZXNzYWdlKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSB7XG4gICAgICAgICAgbGV0IGRpZENhbGxTZW5kUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgICBsZXQgd3JhcHBlZFNlbmRSZXNwb25zZTtcbiAgICAgICAgICBsZXQgc2VuZFJlc3BvbnNlUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgd3JhcHBlZFNlbmRSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAoIWxvZ2dlZFNlbmRSZXNwb25zZURlcHJlY2F0aW9uV2FybmluZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihTRU5EX1JFU1BPTlNFX0RFUFJFQ0FUSU9OX1dBUk5JTkcsIG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICAgICAgICAgICAgICBsb2dnZWRTZW5kUmVzcG9uc2VEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGlkQ2FsbFNlbmRSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsZXQgcmVzdWx0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGxpc3RlbmVyKG1lc3NhZ2UsIHNlbmRlciwgd3JhcHBlZFNlbmRSZXNwb25zZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzUmVzdWx0VGhlbmFibGUgPSByZXN1bHQgIT09IHRydWUgJiYgaXNUaGVuYWJsZShyZXN1bHQpOyAvLyBJZiB0aGUgbGlzdGVuZXIgZGlkbid0IHJldHVybmVkIHRydWUgb3IgYSBQcm9taXNlLCBvciBjYWxsZWRcbiAgICAgICAgICAvLyB3cmFwcGVkU2VuZFJlc3BvbnNlIHN5bmNocm9ub3VzbHksIHdlIGNhbiBleGl0IGVhcmxpZXJcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoZXJlIHdpbGwgYmUgbm8gcmVzcG9uc2Ugc2VudCBmcm9tIHRoaXMgbGlzdGVuZXIuXG5cbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0cnVlICYmICFpc1Jlc3VsdFRoZW5hYmxlICYmICFkaWRDYWxsU2VuZFJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSAvLyBBIHNtYWxsIGhlbHBlciB0byBzZW5kIHRoZSBtZXNzYWdlIGlmIHRoZSBwcm9taXNlIHJlc29sdmVzXG4gICAgICAgICAgLy8gYW5kIGFuIGVycm9yIGlmIHRoZSBwcm9taXNlIHJlamVjdHMgKGEgd3JhcHBlZCBzZW5kTWVzc2FnZSBoYXNcbiAgICAgICAgICAvLyB0byB0cmFuc2xhdGUgdGhlIG1lc3NhZ2UgaW50byBhIHJlc29sdmVkIHByb21pc2Ugb3IgYSByZWplY3RlZFxuICAgICAgICAgIC8vIHByb21pc2UpLlxuXG5cbiAgICAgICAgICBjb25zdCBzZW5kUHJvbWlzZWRSZXN1bHQgPSBwcm9taXNlID0+IHtcbiAgICAgICAgICAgIHByb21pc2UudGhlbihtc2cgPT4ge1xuICAgICAgICAgICAgICAvLyBzZW5kIHRoZSBtZXNzYWdlIHZhbHVlLlxuICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UobXNnKTtcbiAgICAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgLy8gU2VuZCBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGVycm9yIGlmIHRoZSByZWplY3RlZCB2YWx1ZVxuICAgICAgICAgICAgICAvLyBpcyBhbiBpbnN0YW5jZSBvZiBlcnJvciwgb3IgdGhlIG9iamVjdCBpdHNlbGYgb3RoZXJ3aXNlLlxuICAgICAgICAgICAgICBsZXQgbWVzc2FnZTtcblxuICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIGVycm9yLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZFwiO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICBfX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X186IHRydWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIC8vIFByaW50IGFuIGVycm9yIG9uIHRoZSBjb25zb2xlIGlmIHVuYWJsZSB0byBzZW5kIHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBzZW5kIG9uTWVzc2FnZSByZWplY3RlZCByZXBseVwiLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTsgLy8gSWYgdGhlIGxpc3RlbmVyIHJldHVybmVkIGEgUHJvbWlzZSwgc2VuZCB0aGUgcmVzb2x2ZWQgdmFsdWUgYXMgYVxuICAgICAgICAgIC8vIHJlc3VsdCwgb3RoZXJ3aXNlIHdhaXQgdGhlIHByb21pc2UgcmVsYXRlZCB0byB0aGUgd3JhcHBlZFNlbmRSZXNwb25zZVxuICAgICAgICAgIC8vIGNhbGxiYWNrIHRvIHJlc29sdmUgYW5kIHNlbmQgaXQgYXMgYSByZXNwb25zZS5cblxuXG4gICAgICAgICAgaWYgKGlzUmVzdWx0VGhlbmFibGUpIHtcbiAgICAgICAgICAgIHNlbmRQcm9taXNlZFJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZW5kUHJvbWlzZWRSZXN1bHQoc2VuZFJlc3BvbnNlUHJvbWlzZSk7XG4gICAgICAgICAgfSAvLyBMZXQgQ2hyb21lIGtub3cgdGhhdCB0aGUgbGlzdGVuZXIgaXMgcmVwbHlpbmcuXG5cblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHdyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrID0gKHtcbiAgICAgICAgcmVqZWN0LFxuICAgICAgICByZXNvbHZlXG4gICAgICB9LCByZXBseSkgPT4ge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvcikge1xuICAgICAgICAgIC8vIERldGVjdCB3aGVuIG5vbmUgb2YgdGhlIGxpc3RlbmVycyByZXBsaWVkIHRvIHRoZSBzZW5kTWVzc2FnZSBjYWxsIGFuZCByZXNvbHZlXG4gICAgICAgICAgLy8gdGhlIHByb21pc2UgdG8gdW5kZWZpbmVkIGFzIGluIEZpcmVmb3guXG4gICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC9pc3N1ZXMvMTMwXG4gICAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IubWVzc2FnZSA9PT0gQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHJlcGx5ICYmIHJlcGx5Ll9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXykge1xuICAgICAgICAgIC8vIENvbnZlcnQgYmFjayB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZXJyb3IgaW50b1xuICAgICAgICAgIC8vIGFuIEVycm9yIGluc3RhbmNlLlxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocmVwbHkubWVzc2FnZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVwbHkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB3cmFwcGVkU2VuZE1lc3NhZ2UgPSAobmFtZSwgbWV0YWRhdGEsIGFwaU5hbWVzcGFjZU9iaiwgLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCBtZXRhZGF0YS5taW5BcmdzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IG1ldGFkYXRhLm1heEFyZ3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHdyYXBwZWRDYiA9IHdyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrLmJpbmQobnVsbCwge1xuICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFyZ3MucHVzaCh3cmFwcGVkQ2IpO1xuICAgICAgICAgIGFwaU5hbWVzcGFjZU9iai5zZW5kTWVzc2FnZSguLi5hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzdGF0aWNXcmFwcGVycyA9IHtcbiAgICAgICAgZGV2dG9vbHM6IHtcbiAgICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgICBvblJlcXVlc3RGaW5pc2hlZDogd3JhcEV2ZW50KG9uUmVxdWVzdEZpbmlzaGVkV3JhcHBlcnMpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBydW50aW1lOiB7XG4gICAgICAgICAgb25NZXNzYWdlOiB3cmFwRXZlbnQob25NZXNzYWdlV3JhcHBlcnMpLFxuICAgICAgICAgIG9uTWVzc2FnZUV4dGVybmFsOiB3cmFwRXZlbnQob25NZXNzYWdlV3JhcHBlcnMpLFxuICAgICAgICAgIHNlbmRNZXNzYWdlOiB3cmFwcGVkU2VuZE1lc3NhZ2UuYmluZChudWxsLCBcInNlbmRNZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIG1pbkFyZ3M6IDEsXG4gICAgICAgICAgICBtYXhBcmdzOiAzXG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgdGFiczoge1xuICAgICAgICAgIHNlbmRNZXNzYWdlOiB3cmFwcGVkU2VuZE1lc3NhZ2UuYmluZChudWxsLCBcInNlbmRNZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIG1pbkFyZ3M6IDIsXG4gICAgICAgICAgICBtYXhBcmdzOiAzXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHNldHRpbmdNZXRhZGF0YSA9IHtcbiAgICAgICAgY2xlYXI6IHtcbiAgICAgICAgICBtaW5BcmdzOiAxLFxuICAgICAgICAgIG1heEFyZ3M6IDFcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiB7XG4gICAgICAgICAgbWluQXJnczogMSxcbiAgICAgICAgICBtYXhBcmdzOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHNldDoge1xuICAgICAgICAgIG1pbkFyZ3M6IDEsXG4gICAgICAgICAgbWF4QXJnczogMVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgYXBpTWV0YWRhdGEucHJpdmFjeSA9IHtcbiAgICAgICAgbmV0d29yazoge1xuICAgICAgICAgIFwiKlwiOiBzZXR0aW5nTWV0YWRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmljZXM6IHtcbiAgICAgICAgICBcIipcIjogc2V0dGluZ01ldGFkYXRhXG4gICAgICAgIH0sXG4gICAgICAgIHdlYnNpdGVzOiB7XG4gICAgICAgICAgXCIqXCI6IHNldHRpbmdNZXRhZGF0YVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHdyYXBPYmplY3QoZXh0ZW5zaW9uQVBJcywgc3RhdGljV3JhcHBlcnMsIGFwaU1ldGFkYXRhKTtcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBjaHJvbWUgIT0gXCJvYmplY3RcIiB8fCAhY2hyb21lIHx8ICFjaHJvbWUucnVudGltZSB8fCAhY2hyb21lLnJ1bnRpbWUuaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgc2NyaXB0IHNob3VsZCBvbmx5IGJlIGxvYWRlZCBpbiBhIGJyb3dzZXIgZXh0ZW5zaW9uLlwiKTtcbiAgICB9IC8vIFRoZSBidWlsZCBwcm9jZXNzIGFkZHMgYSBVTUQgd3JhcHBlciBhcm91bmQgdGhpcyBmaWxlLCB3aGljaCBtYWtlcyB0aGVcbiAgICAvLyBgbW9kdWxlYCB2YXJpYWJsZSBhdmFpbGFibGUuXG5cblxuICAgIG1vZHVsZS5leHBvcnRzID0gd3JhcEFQSXMoY2hyb21lKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGJyb3dzZXI7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci1wb2x5ZmlsbC5qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvLyBAdHMtaWdub3JlIC0gZmlsZSBzaXplIGhhY2tzXG4gICAgICAgIHJlcXVlc3Qub25jb21wbGV0ZSA9IHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4gcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSBmaWxlIHNpemUgaGFja3NcbiAgICAgICAgcmVxdWVzdC5vbmFib3J0ID0gcmVxdWVzdC5vbmVycm9yID0gKCkgPT4gcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU3RvcmUoZGJOYW1lLCBzdG9yZU5hbWUpIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lKTtcbiAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9ICgpID0+IHJlcXVlc3QucmVzdWx0LmNyZWF0ZU9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG4gICAgY29uc3QgZGJwID0gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KTtcbiAgICByZXR1cm4gKHR4TW9kZSwgY2FsbGJhY2spID0+IGRicC50aGVuKChkYikgPT4gY2FsbGJhY2soZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCB0eE1vZGUpLm9iamVjdFN0b3JlKHN0b3JlTmFtZSkpKTtcbn1cbmxldCBkZWZhdWx0R2V0U3RvcmVGdW5jO1xuZnVuY3Rpb24gZGVmYXVsdEdldFN0b3JlKCkge1xuICAgIGlmICghZGVmYXVsdEdldFN0b3JlRnVuYykge1xuICAgICAgICBkZWZhdWx0R2V0U3RvcmVGdW5jID0gY3JlYXRlU3RvcmUoJ2tleXZhbC1zdG9yZScsICdrZXl2YWwnKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRHZXRTdG9yZUZ1bmM7XG59XG4vKipcbiAqIEdldCBhIHZhbHVlIGJ5IGl0cyBrZXkuXG4gKlxuICogQHBhcmFtIGtleVxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIGdldChrZXksIGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWRvbmx5JywgKHN0b3JlKSA9PiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLmdldChrZXkpKSk7XG59XG4vKipcbiAqIFNldCBhIHZhbHVlIHdpdGggYSBrZXkuXG4gKlxuICogQHBhcmFtIGtleVxuICogQHBhcmFtIHZhbHVlXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUsIGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWR3cml0ZScsIChzdG9yZSkgPT4ge1xuICAgICAgICBzdG9yZS5wdXQodmFsdWUsIGtleSk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbiAgICB9KTtcbn1cbi8qKlxuICogU2V0IG11bHRpcGxlIHZhbHVlcyBhdCBvbmNlLiBUaGlzIGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgc2V0KCkgbXVsdGlwbGUgdGltZXMuXG4gKiBJdCdzIGFsc28gYXRvbWljIOKAkyBpZiBvbmUgb2YgdGhlIHBhaXJzIGNhbid0IGJlIGFkZGVkLCBub25lIHdpbGwgYmUgYWRkZWQuXG4gKlxuICogQHBhcmFtIGVudHJpZXMgQXJyYXkgb2YgZW50cmllcywgd2hlcmUgZWFjaCBlbnRyeSBpcyBhbiBhcnJheSBvZiBgW2tleSwgdmFsdWVdYC5cbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBzZXRNYW55KGVudHJpZXMsIGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWR3cml0ZScsIChzdG9yZSkgPT4ge1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiBzdG9yZS5wdXQoZW50cnlbMV0sIGVudHJ5WzBdKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbiAgICB9KTtcbn1cbi8qKlxuICogR2V0IG11bHRpcGxlIHZhbHVlcyBieSB0aGVpciBrZXlzXG4gKlxuICogQHBhcmFtIGtleXNcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBnZXRNYW55KGtleXMsIGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWRvbmx5JywgKHN0b3JlKSA9PiBQcm9taXNlLmFsbChrZXlzLm1hcCgoa2V5KSA9PiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLmdldChrZXkpKSkpKTtcbn1cbi8qKlxuICogVXBkYXRlIGEgdmFsdWUuIFRoaXMgbGV0cyB5b3Ugc2VlIHRoZSBvbGQgdmFsdWUgYW5kIHVwZGF0ZSBpdCBhcyBhbiBhdG9taWMgb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSB1cGRhdGVyIEEgY2FsbGJhY2sgdGhhdCB0YWtlcyB0aGUgb2xkIHZhbHVlIGFuZCByZXR1cm5zIGEgbmV3IHZhbHVlLlxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZShrZXksIHVwZGF0ZXIsIGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWR3cml0ZScsIChzdG9yZSkgPT4gXG4gICAgLy8gTmVlZCB0byBjcmVhdGUgdGhlIHByb21pc2UgbWFudWFsbHkuXG4gICAgLy8gSWYgSSB0cnkgdG8gY2hhaW4gcHJvbWlzZXMsIHRoZSB0cmFuc2FjdGlvbiBjbG9zZXMgaW4gYnJvd3NlcnNcbiAgICAvLyB0aGF0IHVzZSBhIHByb21pc2UgcG9seWZpbGwgKElFMTAvMTEpLlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc3RvcmUuZ2V0KGtleSkub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdG9yZS5wdXQodXBkYXRlcih0aGlzLnJlc3VsdCksIGtleSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSkpO1xufVxuLyoqXG4gKiBEZWxldGUgYSBwYXJ0aWN1bGFyIGtleSBmcm9tIHRoZSBzdG9yZS5cbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gZGVsKGtleSwgY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZHdyaXRlJywgKHN0b3JlKSA9PiB7XG4gICAgICAgIHN0b3JlLmRlbGV0ZShrZXkpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS50cmFuc2FjdGlvbik7XG4gICAgfSk7XG59XG4vKipcbiAqIERlbGV0ZSBtdWx0aXBsZSBrZXlzIGF0IG9uY2UuXG4gKlxuICogQHBhcmFtIGtleXMgTGlzdCBvZiBrZXlzIHRvIGRlbGV0ZS5cbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBkZWxNYW55KGtleXMsIGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWR3cml0ZScsIChzdG9yZSkgPT4ge1xuICAgICAgICBrZXlzLmZvckVhY2goKGtleSkgPT4gc3RvcmUuZGVsZXRlKGtleSkpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS50cmFuc2FjdGlvbik7XG4gICAgfSk7XG59XG4vKipcbiAqIENsZWFyIGFsbCB2YWx1ZXMgaW4gdGhlIHN0b3JlLlxuICpcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBjbGVhcihjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCAoc3RvcmUpID0+IHtcbiAgICAgICAgc3RvcmUuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZWFjaEN1cnNvcihzdG9yZSwgY2FsbGJhY2spIHtcbiAgICBzdG9yZS5vcGVuQ3Vyc29yKCkub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMucmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYWxsYmFjayh0aGlzLnJlc3VsdCk7XG4gICAgICAgIHRoaXMucmVzdWx0LmNvbnRpbnVlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS50cmFuc2FjdGlvbik7XG59XG4vKipcbiAqIEdldCBhbGwga2V5cyBpbiB0aGUgc3RvcmUuXG4gKlxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIGtleXMoY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCAoc3RvcmUpID0+IHtcbiAgICAgICAgLy8gRmFzdCBwYXRoIGZvciBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaWYgKHN0b3JlLmdldEFsbEtleXMpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLmdldEFsbEtleXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIGVhY2hDdXJzb3Ioc3RvcmUsIChjdXJzb3IpID0+IGl0ZW1zLnB1c2goY3Vyc29yLmtleSkpLnRoZW4oKCkgPT4gaXRlbXMpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBHZXQgYWxsIHZhbHVlcyBpbiB0aGUgc3RvcmUuXG4gKlxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIHZhbHVlcyhjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkb25seScsIChzdG9yZSkgPT4ge1xuICAgICAgICAvLyBGYXN0IHBhdGggZm9yIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpZiAoc3RvcmUuZ2V0QWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS5nZXRBbGwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIGVhY2hDdXJzb3Ioc3RvcmUsIChjdXJzb3IpID0+IGl0ZW1zLnB1c2goY3Vyc29yLnZhbHVlKSkudGhlbigoKSA9PiBpdGVtcyk7XG4gICAgfSk7XG59XG4vKipcbiAqIEdldCBhbGwgZW50cmllcyBpbiB0aGUgc3RvcmUuIEVhY2ggZW50cnkgaXMgYW4gYXJyYXkgb2YgYFtrZXksIHZhbHVlXWAuXG4gKlxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIGVudHJpZXMoY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCAoc3RvcmUpID0+IHtcbiAgICAgICAgLy8gRmFzdCBwYXRoIGZvciBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgLy8gKGFsdGhvdWdoLCBob3BlZnVsbHkgd2UnbGwgZ2V0IGEgc2ltcGxlciBwYXRoIHNvbWUgZGF5KVxuICAgICAgICBpZiAoc3RvcmUuZ2V0QWxsICYmIHN0b3JlLmdldEFsbEtleXMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS5nZXRBbGxLZXlzKCkpLFxuICAgICAgICAgICAgICAgIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUuZ2V0QWxsKCkpLFxuICAgICAgICAgICAgXSkudGhlbigoW2tleXMsIHZhbHVlc10pID0+IGtleXMubWFwKChrZXksIGkpID0+IFtrZXksIHZhbHVlc1tpXV0pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWRvbmx5JywgKHN0b3JlKSA9PiBlYWNoQ3Vyc29yKHN0b3JlLCAoY3Vyc29yKSA9PiBpdGVtcy5wdXNoKFtjdXJzb3Iua2V5LCBjdXJzb3IudmFsdWVdKSkudGhlbigoKSA9PiBpdGVtcykpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyBjbGVhciwgY3JlYXRlU3RvcmUsIGRlbCwgZGVsTWFueSwgZW50cmllcywgZ2V0LCBnZXRNYW55LCBrZXlzLCBwcm9taXNpZnlSZXF1ZXN0LCBzZXQsIHNldE1hbnksIHVwZGF0ZSwgdmFsdWVzIH07XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gXCJqcy1sb2dnZXJcIjtcblxuTG9nZ2VyLnVzZURlZmF1bHRzKCk7XG5Mb2dnZXIuc2V0TGV2ZWwoXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IExvZ2dlci5FUlJPUiA6IExvZ2dlci5ERUJVR1xuKTtcblxuZXhwb3J0IGNvbnN0IFhMb2dnZXIgPSBMb2dnZXI7XG4iLCJleHBvcnQgZnVuY3Rpb24gY29udmVydEJsb2JUb0Jhc2U2NEFzeW5jKGJsb2I6IEJsb2IpOiBQcm9taXNlPHN0cmluZz4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xuICAgICAgY29uc3QgYmFzZTY0RGF0YSA9IHJlYWRlci5yZXN1bHQgYXMgc3RyaW5nO1xuICAgICAgcmVzb2x2ZShiYXNlNjREYXRhKTtcbiAgICB9O1xuICAgIHJlYWRlci5vbmVycm9yID0gcmVqZWN0O1xuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBjb25zdCBNQVhfV0lEVEhfVEhVTUJOQUlMID0gTWF0aC5yb3VuZCgyNTAgKiAxLjUpO1xuZXhwb3J0IGNvbnN0IE1BWF9IRUlHSFRfVEhVTUJOQUlMID0gTWF0aC5yb3VuZCgxMzAgKiAxLjUpO1xuXG4vLyBXZXJlIGRyYXdpbmcgaWQgaXMgc2F2ZWQgaW4gbG9jYWwgc3RvcmFnZVxuZXhwb3J0IGNvbnN0IERSQVdJTkdfSURfS0VZX0xTID0gXCJfX2RyYXdpbmdfaWRcIjtcbiIsImltcG9ydCB7IE1BWF9IRUlHSFRfVEhVTUJOQUlMLCBNQVhfV0lEVEhfVEhVTUJOQUlMIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgWExvZ2dlciB9IGZyb20gXCIuLi9sb2dnZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU5ld0RpbWVuc2lvbnMod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgWExvZ2dlci5sb2coXG4gICAgXCLwn5GJIE9yaWdpbmFsIEltYWdlIGRpbWVuc2lvbnM6XCIsXG4gICAgYCR7TWF0aC5yb3VuZCh3aWR0aCl9IHggJHtNYXRoLnJvdW5kKGhlaWdodCl9YFxuICApO1xuICBpZiAod2lkdGggPD0gTUFYX1dJRFRIX1RIVU1CTkFJTCAmJiBoZWlnaHQgPD0gTUFYX0hFSUdIVF9USFVNQk5BSUwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IE1hdGgubWF4KDEsIHdpZHRoKSxcbiAgICAgIGhlaWdodDogTWF0aC5tYXgoMSwgaGVpZ2h0KSxcbiAgICAgIHNjYWxlOiAxLFxuICAgIH07XG4gIH1cblxuICBjb25zdCB3aWR0aFNjYWxlID0gd2lkdGggLyBNQVhfV0lEVEhfVEhVTUJOQUlMO1xuICBjb25zdCBoZWlnaHRTY2FsZSA9IGhlaWdodCAvIE1BWF9IRUlHSFRfVEhVTUJOQUlMO1xuXG4gIGNvbnN0IHNjYWxlID0gTWF0aC5tYXgod2lkdGhTY2FsZSwgaGVpZ2h0U2NhbGUpO1xuXG4gIHdpZHRoID0gTWF0aC5tYXgoMSwgTWF0aC5yb3VuZCh3aWR0aCAvIHNjYWxlKSk7XG4gIGhlaWdodCA9IE1hdGgubWF4KDEsIE1hdGgucm91bmQoaGVpZ2h0IC8gc2NhbGUpKTtcblxuICBYTG9nZ2VyLmxvZyhcbiAgICBcIk5ldyBJbWFnZSBkaW1lbnNpb25zXCIsXG4gICAgYCR7TWF0aC5yb3VuZCh3aWR0aCl9IHggJHtNYXRoLnJvdW5kKGhlaWdodCl9YCxcbiAgICBzY2FsZVxuICApO1xuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBzY2FsZTogMS4wIC8gc2NhbGUsXG4gIH07XG59XG4iLCJpbXBvcnQgdHlwZSB7IEV4Y2FsaWRyYXdJbWFnZUVsZW1lbnQgfSBmcm9tIFwiQGV4Y2FsaWRyYXcvZXhjYWxpZHJhdy90eXBlcy9lbGVtZW50L3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIEJpbmFyeUZpbGVEYXRhLFxuICBCaW5hcnlGaWxlcyxcbn0gZnJvbSBcIkBleGNhbGlkcmF3L2V4Y2FsaWRyYXcvdHlwZXMvdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBnZXRNYW55IH0gZnJvbSBcImlkYi1rZXl2YWxcIjtcbmltcG9ydCB7IERyYXdpbmdEYXRhU3RhdGUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9kcmF3aW5nLWRhdGEtc3RhdGUuaW50ZXJmYWNlXCI7XG5pbXBvcnQgdHlwZSB7IEV4Y2FsaWRyYXdEYXRhU3RhdGUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9leGNhbGlkcmF3LWRhdGEtc3RhdGUuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBYTG9nZ2VyIH0gZnJvbSBcIi4uL2xpYi9sb2dnZXJcIjtcbmltcG9ydCB7IGNvbnZlcnRCbG9iVG9CYXNlNjRBc3luYyB9IGZyb20gXCIuLi9saWIvdXRpbHMvYmxvYi10by1iYXNlNjQudXRpbFwiO1xuaW1wb3J0IHsgY2FsY3VsYXRlTmV3RGltZW5zaW9ucyB9IGZyb20gXCIuLi9saWIvdXRpbHMvY2FsY3VsYXRlLW5ldy1kaW1lbnNpb25zLnV0aWxcIjtcblxuLy8gV2VyZSBpbWFnZXMgYXJlIHN0b3JlZDogaHR0cHM6Ly9naXRodWIuY29tL2V4Y2FsaWRyYXcvZXhjYWxpZHJhdy9ibG9iL2U4ZGVmOGRhOGQ1ZmNmOTQ0NWFlYmRkOTk2ZGUzZmVlNGNlY2Y3ZWYvZXhjYWxpZHJhdy1hcHAvZGF0YS9Mb2NhbERhdGEudHMjTDI0XG5jb25zdCBmaWxlc1N0b3JlID0gY3JlYXRlU3RvcmUoXCJmaWxlcy1kYlwiLCBcImZpbGVzLXN0b3JlXCIpO1xuXG50eXBlIEdldERyYXdpbmdEYXRhU3RhdGVQcm9wcyA9IHtcbiAgdGFrZVNjcmVlbnNob3Q/OiBib29sZWFuO1xufTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREcmF3aW5nRGF0YVN0YXRlKFxuICBwcm9wczogR2V0RHJhd2luZ0RhdGFTdGF0ZVByb3BzID0geyB0YWtlU2NyZWVuc2hvdDogdHJ1ZSB9XG4pOiBQcm9taXNlPERyYXdpbmdEYXRhU3RhdGU+IHtcbiAgY29uc3QgeyBleGNhbGlkcmF3LCBleGNhbGlkcmF3U3RhdGUsIHZlcnNpb25GaWxlcywgdmVyc2lvbkRhdGFTdGF0ZSB9ID1cbiAgICBnZXRFeGNhbGlkcmF3RGF0YVN0YXRlKCk7XG5cbiAgY29uc3QgZWxlbWVudHMgPSBKU09OLnBhcnNlKGV4Y2FsaWRyYXcpIGFzIEV4Y2FsaWRyYXdFbGVtZW50cztcbiAgY29uc3QgYXBwU3RhdGUgPSBKU09OLnBhcnNlKGV4Y2FsaWRyYXdTdGF0ZSkgYXMgRXhjYWxpZHJhd0FwcFN0YXRlO1xuXG4gIGxldCBpbWFnZUJhc2U2NDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvLyBTY3JlZW5zaG90IGlzIG9wdGlvbmFsXG4gIHRyeSB7XG4gICAgaWYgKHByb3BzPy50YWtlU2NyZWVuc2hvdCkge1xuICAgICAgaW1hZ2VCYXNlNjQgPSBhd2FpdCB0YWtlU2NyZWVuc2hvdCh7XG4gICAgICAgIGVsZW1lbnRzLFxuICAgICAgICBhcHBTdGF0ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBYTG9nZ2VyLmVycm9yKFwiRXJyb3IgdGFraW5nIHNjcmVlbnNob3RcIiwgZXJyb3IpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleGNhbGlkcmF3LFxuICAgIGV4Y2FsaWRyYXdTdGF0ZSxcbiAgICB2ZXJzaW9uRmlsZXMsXG4gICAgdmVyc2lvbkRhdGFTdGF0ZSxcbiAgICBpbWFnZUJhc2U2NCxcbiAgICB2aWV3QmFja2dyb3VuZENvbG9yOiBhcHBTdGF0ZT8udmlld0JhY2tncm91bmRDb2xvcixcbiAgfTtcbn1cblxudHlwZSBUYWtlU2NyZWVuc2hvdFByb3BzID0ge1xuICBlbGVtZW50czogRXhjYWxpZHJhd0VsZW1lbnRzO1xuICBhcHBTdGF0ZTogRXhjYWxpZHJhd0FwcFN0YXRlO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gdGFrZVNjcmVlbnNob3Qoe1xuICBlbGVtZW50cyxcbiAgYXBwU3RhdGUsXG59OiBUYWtlU2NyZWVuc2hvdFByb3BzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgY29uc3QgaW1hZ2VGaWxlSWRzID0gZWxlbWVudHNcbiAgICAuZmlsdGVyKChpdGVtKTogaXRlbSBpcyBFeGNhbGlkcmF3SW1hZ2VFbGVtZW50ID0+IGl0ZW0udHlwZSA9PT0gXCJpbWFnZVwiKVxuICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0uZmlsZUlkKTtcblxuICBsZXQgZmlsZXM6IEJpbmFyeUZpbGVzID0ge307XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldE1hbnk8QmluYXJ5RmlsZURhdGEgfCB1bmRlZmluZWQ+KFxuICAgICAgaW1hZ2VGaWxlSWRzLFxuICAgICAgZmlsZXNTdG9yZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbSkge1xuICAgICAgICBmaWxlc1tpdGVtLmlkXSA9IGl0ZW07XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgWExvZ2dlci53YXJuKFwiRXJyb3IgcmV0cmlldmluZyBmaWxlcyBmcm9tIEluZGV4ZWREQlwiLCBlcnJvcik7XG4gIH1cblxuICBjb25zdCBibG9iID0gYXdhaXQgd2luZG93LkV4Y2FsaWRyYXdMaWIuZXhwb3J0VG9CbG9iKHtcbiAgICBlbGVtZW50cyxcbiAgICBnZXREaW1lbnNpb25zOiAod2lkdGgsIGhlaWdodCkgPT4ge1xuICAgICAgcmV0dXJuIGNhbGN1bGF0ZU5ld0RpbWVuc2lvbnMod2lkdGgsIGhlaWdodCk7XG4gICAgfSxcbiAgICBmaWxlcyxcbiAgICBhcHBTdGF0ZSxcbiAgfSk7XG5cbiAgY29uc3QgaW1hZ2VCYXNlNjQgPSBhd2FpdCBjb252ZXJ0QmxvYlRvQmFzZTY0QXN5bmMoYmxvYik7XG5cbiAgWExvZ2dlci5sb2coXG4gICAgXCLwn5O3IFRha2UgU2NyZWVuc2hvb3QgVG9vazpcIixcbiAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZSArIFwibXNcIlxuICApO1xuXG4gIHJldHVybiBpbWFnZUJhc2U2NDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4Y2FsaWRyYXdEYXRhU3RhdGUoKTogRXhjYWxpZHJhd0RhdGFTdGF0ZSB7XG4gIGNvbnN0IGV4Y2FsaWRyYXcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImV4Y2FsaWRyYXdcIik7XG4gIGNvbnN0IGV4Y2FsaWRyYXdTdGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZXhjYWxpZHJhdy1zdGF0ZVwiKTtcbiAgY29uc3QgdmVyc2lvbkZpbGVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ2ZXJzaW9uLWZpbGVzXCIpO1xuICBjb25zdCB2ZXJzaW9uRGF0YVN0YXRlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ2ZXJzaW9uLWRhdGFTdGF0ZVwiKTtcblxuICByZXR1cm4ge1xuICAgIGV4Y2FsaWRyYXcsXG4gICAgZXhjYWxpZHJhd1N0YXRlLFxuICAgIHZlcnNpb25GaWxlcyxcbiAgICB2ZXJzaW9uRGF0YVN0YXRlLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhjYWxpZHJhd0VtcHR5RGF0YVN0YXRlKCk6IEV4Y2FsaWRyYXdEYXRhU3RhdGUge1xuICBjb25zdCBleGNhbGlkcmF3ID0gXCJbXVwiO1xuICBjb25zdCBleGNhbGlkcmF3U3RhdGUgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgc2hvd1dlbGNvbWVTY3JlZW46IGZhbHNlLFxuICAgIHRoZW1lOiBcImxpZ2h0XCIsXG4gICAgY3VycmVudENoYXJ0VHlwZTogXCJiYXJcIixcbiAgICBjdXJyZW50SXRlbUJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGN1cnJlbnRJdGVtRW5kQXJyb3doZWFkOiBcImFycm93XCIsXG4gICAgY3VycmVudEl0ZW1GaWxsU3R5bGU6IFwic29saWRcIixcbiAgICBjdXJyZW50SXRlbUZvbnRGYW1pbHk6IDEsXG4gICAgY3VycmVudEl0ZW1Gb250U2l6ZTogMjAsXG4gICAgY3VycmVudEl0ZW1PcGFjaXR5OiAxMDAsXG4gICAgY3VycmVudEl0ZW1Sb3VnaG5lc3M6IDEsXG4gICAgY3VycmVudEl0ZW1TdGFydEFycm93aGVhZDogbnVsbCxcbiAgICBjdXJyZW50SXRlbVN0cm9rZUNvbG9yOiBcIiMxZTFlMWVcIixcbiAgICBjdXJyZW50SXRlbVJvdW5kbmVzczogXCJyb3VuZFwiLFxuICAgIGN1cnJlbnRJdGVtU3Ryb2tlU3R5bGU6IFwic29saWRcIixcbiAgICBjdXJyZW50SXRlbVN0cm9rZVdpZHRoOiAyLFxuICAgIGN1cnJlbnRJdGVtVGV4dEFsaWduOiBcImxlZnRcIixcbiAgICBjdXJzb3JCdXR0b246IFwidXBcIixcbiAgICBlZGl0aW5nR3JvdXBJZDogbnVsbCxcbiAgICBhY3RpdmVUb29sOiB7XG4gICAgICB0eXBlOiBcInNlbGVjdGlvblwiLFxuICAgICAgY3VzdG9tVHlwZTogbnVsbCxcbiAgICAgIGxvY2tlZDogZmFsc2UsXG4gICAgICBsYXN0QWN0aXZlVG9vbDogbnVsbCxcbiAgICB9LFxuICAgIHBlbk1vZGU6IHRydWUsXG4gICAgcGVuRGV0ZWN0ZWQ6IHRydWUsXG4gICAgZXhwb3J0QmFja2dyb3VuZDogdHJ1ZSxcbiAgICBleHBvcnRTY2FsZTogMSxcbiAgICBleHBvcnRFbWJlZFNjZW5lOiBmYWxzZSxcbiAgICBleHBvcnRXaXRoRGFya01vZGU6IGZhbHNlLFxuICAgIGdyaWRTaXplOiBudWxsLFxuICAgIGRlZmF1bHRTaWRlYmFyRG9ja2VkUHJlZmVyZW5jZTogZmFsc2UsXG4gICAgbGFzdFBvaW50ZXJEb3duV2l0aDogXCJtb3VzZVwiLFxuICAgIG5hbWU6IFwiVW50aXRsZWQtMjAyMy0xMS0wNC0xNzI1XCIsXG4gICAgb3Blbk1lbnU6IG51bGwsXG4gICAgb3BlblNpZGViYXI6IG51bGwsXG4gICAgcHJldmlvdXNTZWxlY3RlZEVsZW1lbnRJZHM6IHt9LFxuICAgIHNjcm9sbGVkT3V0c2lkZTogZmFsc2UsXG4gICAgc2Nyb2xsWDogMCxcbiAgICBzY3JvbGxZOiAwLFxuICAgIHNlbGVjdGVkRWxlbWVudElkczoge30sXG4gICAgc2VsZWN0ZWRHcm91cElkczoge30sXG4gICAgc2hvdWxkQ2FjaGVJZ25vcmVab29tOiBmYWxzZSxcbiAgICBzaG93U3RhdHM6IGZhbHNlLFxuICAgIHZpZXdCYWNrZ3JvdW5kQ29sb3I6IFwiI2ZmZmZmZlwiLFxuICAgIHplbk1vZGVFbmFibGVkOiBmYWxzZSxcbiAgICB6b29tOiB7XG4gICAgICB2YWx1ZTogMSxcbiAgICB9LFxuICAgIHNlbGVjdGVkTGluZWFyRWxlbWVudDogbnVsbCxcbiAgICBvYmplY3RzU25hcE1vZGVFbmFibGVkOiBmYWxzZSxcbiAgfSk7XG4gIGNvbnN0IHZlcnNpb25GaWxlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidmVyc2lvbi1maWxlc1wiKTtcbiAgY29uc3QgdmVyc2lvbkRhdGFTdGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidmVyc2lvbi1kYXRhU3RhdGVcIik7XG5cbiAgcmV0dXJuIHtcbiAgICBleGNhbGlkcmF3LFxuICAgIGV4Y2FsaWRyYXdTdGF0ZSxcbiAgICB2ZXJzaW9uRmlsZXMsXG4gICAgdmVyc2lvbkRhdGFTdGF0ZSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmlwdFBhcmFtczxUPigpOiBUIHtcbiAgY29uc3QgcGFyYW1zID0gd2luZG93Ll9fU0NSSVBUX1BBUkFNU19fO1xuXG4gIC8vIFJlc2V0IHBhcmFtcyBhZnRlciByZWFkIHRvIGF2b2lkIGJlaW5nIHVzZWQgYnkgYW5vdGhlciBzY3JpcHRcbiAgd2luZG93Ll9fU0NSSVBUX1BBUkFNU19fID0gdW5kZWZpbmVkO1xuXG4gIHJldHVybiBwYXJhbXMgYXMgVDtcbn1cbiIsImltcG9ydCB7IERyYXdpbmdEYXRhU3RhdGUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9kcmF3aW5nLWRhdGEtc3RhdGUuaW50ZXJmYWNlXCI7XG5cbmV4cG9ydCBlbnVtIE1lc3NhZ2VUeXBlIHtcbiAgLy8gRm9yIGJhY2tncm91bmQ6XG4gIFNBVkVfRFJBV0lORyA9IFwiU0FWRV9EUkFXSU5HXCIsXG4gIFNBVkVfTkVXX0RSQVdJTkcgPSBcIlNBVkVfTkVXX0RSQVdJTkdcIixcbn1cblxuZXhwb3J0IHR5cGUgU2F2ZU5ld0RyYXdpbmdNZXNzYWdlID0ge1xuICB0eXBlOiBNZXNzYWdlVHlwZS5TQVZFX05FV19EUkFXSU5HO1xuICBwYXlsb2FkOiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZXhjYWxpZHJhdzogc3RyaW5nO1xuICAgIGV4Y2FsaWRyYXdTdGF0ZTogc3RyaW5nO1xuICAgIHZlcnNpb25GaWxlczogc3RyaW5nO1xuICAgIHZlcnNpb25EYXRhU3RhdGU6IHN0cmluZztcbiAgICBpbWFnZUJhc2U2ND86IERyYXdpbmdEYXRhU3RhdGVbXCJpbWFnZUJhc2U2NFwiXTtcbiAgICB2aWV3QmFja2dyb3VuZENvbG9yPzogRHJhd2luZ0RhdGFTdGF0ZVtcInZpZXdCYWNrZ3JvdW5kQ29sb3JcIl07XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBTYXZlRHJhd2luZ01lc3NhZ2UgPSB7XG4gIHR5cGU6IE1lc3NhZ2VUeXBlLlNBVkVfRFJBV0lORztcbiAgcGF5bG9hZDoge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBleGNhbGlkcmF3OiBzdHJpbmc7XG4gICAgZXhjYWxpZHJhd1N0YXRlOiBzdHJpbmc7XG4gICAgdmVyc2lvbkZpbGVzOiBzdHJpbmc7XG4gICAgdmVyc2lvbkRhdGFTdGF0ZTogc3RyaW5nO1xuICAgIGltYWdlQmFzZTY0PzogRHJhd2luZ0RhdGFTdGF0ZVtcImltYWdlQmFzZTY0XCJdO1xuICAgIHZpZXdCYWNrZ3JvdW5kQ29sb3I/OiBEcmF3aW5nRGF0YVN0YXRlW1widmlld0JhY2tncm91bmRDb2xvclwiXTtcbiAgfTtcbn07XG4iLCJpbXBvcnQge1xuICBnZXREcmF3aW5nRGF0YVN0YXRlLFxuICBnZXRTY3JpcHRQYXJhbXMsXG59IGZyb20gXCIuLi9Db250ZW50U2NyaXB0L2NvbnRlbnQtc2NyaXB0LnV0aWxzXCI7XG5pbXBvcnQgeyBNZXNzYWdlVHlwZSwgU2F2ZURyYXdpbmdNZXNzYWdlIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9tZXNzYWdlLnR5cGVzXCI7XG5pbXBvcnQgeyBJRHJhd2luZyB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2RyYXdpbmcuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBEUkFXSU5HX0lEX0tFWV9MUyB9IGZyb20gXCIuLi9saWIvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBYTG9nZ2VyIH0gZnJvbSBcIi4uL2xpYi9sb2dnZXJcIjtcbmltcG9ydCB7IEFzIH0gZnJvbSBcIi4uL2xpYi90eXBlcy51dGlsc1wiO1xuY29uc3QgeyBicm93c2VyIH0gPSByZXF1aXJlKFwid2ViZXh0ZW5zaW9uLXBvbHlmaWxsLXRzXCIpO1xuXG50eXBlIFNjcmlwdFBhcmFtcyA9IHtcbiAgaWQ6IHN0cmluZztcbn07XG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IGdldFNjcmlwdFBhcmFtczxTY3JpcHRQYXJhbXMgfCB1bmRlZmluZWQ+KCk7XG5cbiAgY29uc3QgbG9hZERyYXdpbmdJZCA9IHBhcmFtcz8uaWQ7XG4gIGlmICghbG9hZERyYXdpbmdJZCkge1xuICAgIFhMb2dnZXIuaW5mbyhcIk5vIGRyYXdpbmcgaWQgZm91bmQsIGNvdWxkIG5vdCBsb2FkXCIpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU2F2ZSBkYXRhIGJlZm9yZSBsb2FkIG5ldyBkcmF3aW5nIGlmIHRoZXJlIGlzIGEgY3VycmVudCBkcmF3aW5nXG4gIGNvbnN0IGN1cnJlbnREcmF3aW5nSWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShEUkFXSU5HX0lEX0tFWV9MUyk7XG4gIGlmIChjdXJyZW50RHJhd2luZ0lkKSB7XG4gICAgY29uc3QgZHJhd2luZ0RhdGFTdGF0ZSA9IGF3YWl0IGdldERyYXdpbmdEYXRhU3RhdGUoKTtcblxuICAgIGF3YWl0IGJyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZShcbiAgICAgIEFzPFNhdmVEcmF3aW5nTWVzc2FnZT4oe1xuICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5TQVZFX0RSQVdJTkcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBpZDogY3VycmVudERyYXdpbmdJZCxcbiAgICAgICAgICBleGNhbGlkcmF3OiBkcmF3aW5nRGF0YVN0YXRlLmV4Y2FsaWRyYXcsXG4gICAgICAgICAgZXhjYWxpZHJhd1N0YXRlOiBkcmF3aW5nRGF0YVN0YXRlLmV4Y2FsaWRyYXdTdGF0ZSxcbiAgICAgICAgICB2ZXJzaW9uRmlsZXM6IGRyYXdpbmdEYXRhU3RhdGUudmVyc2lvbkZpbGVzLFxuICAgICAgICAgIHZlcnNpb25EYXRhU3RhdGU6IGRyYXdpbmdEYXRhU3RhdGUudmVyc2lvbkRhdGFTdGF0ZSxcbiAgICAgICAgICBpbWFnZUJhc2U2NDogZHJhd2luZ0RhdGFTdGF0ZS5pbWFnZUJhc2U2NCxcbiAgICAgICAgICB2aWV3QmFja2dyb3VuZENvbG9yOiBkcmF3aW5nRGF0YVN0YXRlLnZpZXdCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvLyBMb2FkIG5ldyBkcmF3aW5nXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChsb2FkRHJhd2luZ0lkKTtcblxuICBjb25zdCBkcmF3aW5nRGF0YSA9IHJlc3BvbnNlW2xvYWREcmF3aW5nSWRdIGFzIElEcmF3aW5nO1xuXG4gIGlmICghZHJhd2luZ0RhdGEpIHtcbiAgICBYTG9nZ2VyLmVycm9yKFwiTm8gZHJhd2luZyBkYXRhIGZvdW5kXCIpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBleGNhbGlkcmF3LCBleGNhbGlkcmF3U3RhdGUsIHZlcnNpb25GaWxlcywgdmVyc2lvbkRhdGFTdGF0ZSB9ID1cbiAgICBkcmF3aW5nRGF0YS5kYXRhO1xuXG4gIC8vIFNlZW1zIEV4Y2FsaWRyYXcgc2F2ZXMgZGF0YSB0byBsb2NhbFN0b3JhZ2UgYmVmb3JlIHJlbG9hZCBwYWdlKEkgZ3Vlc3Mgd2hlbiB0aGVyZSBpcyBzb21ldGhpbmcgcGVuZGluZykuXG4gIC8vIFRvIGF2b2lkIGl0IG92ZXJ3cml0ZSBvdXIgZGF0YSwgIHNhdmUgdG8gbG9jYWxTdG9yYWdlIG9uIHRoaXMgZXZlbnQgaW5zdGVhZC5cbiAgLy8gISBUT0RPOiBQcm9iYWJseSBuZWVkIHRvIG1vdmUgdGhlIGxvZ2ljIG9mIHNhdmluZyBkYXRhIGJlZm9yZSBzd2l0Y2ggdG8gaGVyZS5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgKCkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiZXhjYWxpZHJhd1wiLCBleGNhbGlkcmF3KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImV4Y2FsaWRyYXctc3RhdGVcIiwgZXhjYWxpZHJhd1N0YXRlKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInZlcnNpb24tZmlsZXNcIiwgdmVyc2lvbkZpbGVzKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInZlcnNpb24tZGF0YVN0YXRlXCIsIHZlcnNpb25EYXRhU3RhdGUpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKERSQVdJTkdfSURfS0VZX0xTLCBsb2FkRHJhd2luZ0lkKTtcbiAgfSk7XG5cbiAgLy8gUmVsb2FkIHBhZ2UgdG8gYXBwbHkgY2hhbmdlc1xuICBsb2NhdGlvbi5yZWxvYWQoKTtcbn0pKCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdsb2JhbCIsImxvZ0hhbmRsZXIiLCJMb2dnZXIiLCJWRVJTSU9OIiwiY29udGV4dHVhbExvZ2dlcnNCeU5hbWVNYXAiLCJiaW5kIiwic2NvcGUiLCJmdW5jIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJtZXJnZSIsImtleSIsImkiLCJhcmdzIiwidGFyZ2V0IiwibGVuZ3RoIiwiaGFzT3duUHJvcGVydHkiLCJkZWZpbmVMb2dMZXZlbCIsInZhbHVlIiwibmFtZSIsIlRSQUNFIiwiREVCVUciLCJJTkZPIiwiVElNRSIsIldBUk4iLCJFUlJPUiIsIk9GRiIsIkNvbnRleHR1YWxMb2dnZXIiLCJkZWZhdWx0Q29udGV4dCIsInRoaXMiLCJjb250ZXh0Iiwic2V0TGV2ZWwiLCJmaWx0ZXJMZXZlbCIsImxvZyIsImluZm8iLCJwcm90b3R5cGUiLCJuZXdMZXZlbCIsImdldExldmVsIiwiZW5hYmxlZEZvciIsImx2bCIsInRyYWNlIiwiaW52b2tlIiwiZGVidWciLCJ3YXJuIiwiZXJyb3IiLCJ0aW1lIiwibGFiZWwiLCJ0aW1lRW5kIiwibGV2ZWwiLCJtc2dBcmdzIiwiTCIsImdsb2JhbExvZ2dlciIsInNldEhhbmRsZXIiLCJnZXQiLCJjcmVhdGVEZWZhdWx0SGFuZGxlciIsIm9wdGlvbnMiLCJmb3JtYXR0ZXIiLCJtZXNzYWdlcyIsInVuc2hpZnQiLCJ0aW1lclN0YXJ0VGltZUJ5TGFiZWxNYXAiLCJpbnZva2VDb25zb2xlTWV0aG9kIiwiaGRsciIsIkZ1bmN0aW9uIiwiY2FsbCIsImNvbnNvbGUiLCJBcnJheSIsInNsaWNlIiwidGltZXJMYWJlbCIsIkRhdGUiLCJnZXRUaW1lIiwidXNlRGVmYXVsdHMiLCJkZWZhdWx0TGV2ZWwiLCJzZXREZWZhdWx0cyIsInJ1bnRpbWUiLCJ1bmRlZmluZWQiLCJPcCIsIk9iamVjdCIsImhhc093biIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIm1ldGhvZCIsImFyZyIsIkdlblN0YXRlRXhlY3V0aW5nIiwiRXJyb3IiLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwidHlwZSIsImRvbmUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsImZuIiwib2JqIiwiZXJyIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImNvbnN0cnVjdG9yIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsInRvU3RyaW5nIiwia2V5cyIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZGVmaW5lUHJvcGVydHkiLCJicm93c2VyIiwiZ2xvYmFsVGhpcyIsIkNIUk9NRV9TRU5EX01FU1NBR0VfQ0FMTEJBQ0tfTk9fUkVTUE9OU0VfTUVTU0FHRSIsIlNFTkRfUkVTUE9OU0VfREVQUkVDQVRJT05fV0FSTklORyIsIndyYXBBUElzIiwiZXh0ZW5zaW9uQVBJcyIsImFwaU1ldGFkYXRhIiwiRGVmYXVsdFdlYWtNYXAiLCJXZWFrTWFwIiwiY3JlYXRlSXRlbSIsIml0ZW1zIiwic3VwZXIiLCJoYXMiLCJzZXQiLCJpc1RoZW5hYmxlIiwibWFrZUNhbGxiYWNrIiwicHJvbWlzZSIsIm1ldGFkYXRhIiwiY2FsbGJhY2tBcmdzIiwibGFzdEVycm9yIiwibWVzc2FnZSIsInNpbmdsZUNhbGxiYWNrQXJnIiwicGx1cmFsaXplQXJndW1lbnRzIiwibnVtQXJncyIsIndyYXBBc3luY0Z1bmN0aW9uIiwibWluQXJncyIsIm1heEFyZ3MiLCJmYWxsYmFja1RvTm9DYWxsYmFjayIsImNiRXJyb3IiLCJub0NhbGxiYWNrIiwid3JhcE1ldGhvZCIsIndyYXBwZXIiLCJQcm94eSIsInRhcmdldE1ldGhvZCIsInRoaXNPYmoiLCJ3cmFwT2JqZWN0Iiwid3JhcHBlcnMiLCJjYWNoZSIsImhhbmRsZXJzIiwicHJveHlUYXJnZXQiLCJwcm9wIiwicmVjZWl2ZXIiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZGVzYyIsIlJlZmxlY3QiLCJkZWxldGVQcm9wZXJ0eSIsIndyYXBFdmVudCIsIndyYXBwZXJNYXAiLCJhZGRMaXN0ZW5lciIsImxpc3RlbmVyIiwiaGFzTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIm9uUmVxdWVzdEZpbmlzaGVkV3JhcHBlcnMiLCJyZXEiLCJ3cmFwcGVkUmVxIiwiZ2V0Q29udGVudCIsImxvZ2dlZFNlbmRSZXNwb25zZURlcHJlY2F0aW9uV2FybmluZyIsIm9uTWVzc2FnZVdyYXBwZXJzIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwid3JhcHBlZFNlbmRSZXNwb25zZSIsImRpZENhbGxTZW5kUmVzcG9uc2UiLCJzZW5kUmVzcG9uc2VQcm9taXNlIiwicmVzcG9uc2UiLCJzdGFjayIsImlzUmVzdWx0VGhlbmFibGUiLCJzZW5kUHJvbWlzZWRSZXN1bHQiLCJtc2ciLCJfX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X18iLCJjYXRjaCIsIndyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrIiwicmVwbHkiLCJ3cmFwcGVkU2VuZE1lc3NhZ2UiLCJhcGlOYW1lc3BhY2VPYmoiLCJ3cmFwcGVkQ2IiLCJzZW5kTWVzc2FnZSIsInN0YXRpY1dyYXBwZXJzIiwiZGV2dG9vbHMiLCJuZXR3b3JrIiwib25SZXF1ZXN0RmluaXNoZWQiLCJvbk1lc3NhZ2UiLCJvbk1lc3NhZ2VFeHRlcm5hbCIsInRhYnMiLCJzZXR0aW5nTWV0YWRhdGEiLCJjbGVhciIsInByaXZhY3kiLCJzZXJ2aWNlcyIsIndlYnNpdGVzIiwiY2hyb21lIiwiaWQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwicHJvbWlzaWZ5UmVxdWVzdCIsInJlcXVlc3QiLCJvbmNvbXBsZXRlIiwib25zdWNjZXNzIiwib25hYm9ydCIsIm9uZXJyb3IiLCJjcmVhdGVTdG9yZSIsImRiTmFtZSIsInN0b3JlTmFtZSIsImluZGV4ZWREQiIsIm9wZW4iLCJvbnVwZ3JhZGVuZWVkZWQiLCJjcmVhdGVPYmplY3RTdG9yZSIsImRicCIsInR4TW9kZSIsImNhbGxiYWNrIiwiZGIiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiZGVmYXVsdEdldFN0b3JlRnVuYyIsImRlZmF1bHRHZXRTdG9yZSIsImdldE1hbnkiLCJjdXN0b21TdG9yZSIsInN0b3JlIiwiYWxsIiwibWFwIiwiWExvZ2dlciIsImNvbnZlcnRCbG9iVG9CYXNlNjRBc3luYyIsImJsb2IiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkZW5kIiwiYmFzZTY0RGF0YSIsInJlYWRBc0RhdGFVUkwiLCJNQVhfV0lEVEhfVEhVTUJOQUlMIiwiTWF0aCIsInJvdW5kIiwiTUFYX0hFSUdIVF9USFVNQk5BSUwiLCJEUkFXSU5HX0lEX0tFWV9MUyIsImNhbGN1bGF0ZU5ld0RpbWVuc2lvbnMiLCJ3aWR0aCIsImhlaWdodCIsIm1heCIsInNjYWxlIiwid2lkdGhTY2FsZSIsImhlaWdodFNjYWxlIiwiZmlsZXNTdG9yZSIsImdldERyYXdpbmdEYXRhU3RhdGUiLCJwcm9wcyIsInRha2VTY3JlZW5zaG90IiwiZ2V0RXhjYWxpZHJhd0RhdGFTdGF0ZSIsImV4Y2FsaWRyYXciLCJleGNhbGlkcmF3U3RhdGUiLCJ2ZXJzaW9uRmlsZXMiLCJ2ZXJzaW9uRGF0YVN0YXRlIiwiZWxlbWVudHMiLCJKU09OIiwicGFyc2UiLCJhcHBTdGF0ZSIsImltYWdlQmFzZTY0Iiwidmlld0JhY2tncm91bmRDb2xvciIsInN0YXJ0VGltZSIsImltYWdlRmlsZUlkcyIsImZpbHRlciIsIml0ZW0iLCJmaWxlSWQiLCJmaWxlcyIsIndpbmRvdyIsIkV4Y2FsaWRyYXdMaWIiLCJleHBvcnRUb0Jsb2IiLCJnZXREaW1lbnNpb25zIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImdldFNjcmlwdFBhcmFtcyIsInBhcmFtcyIsIl9fU0NSSVBUX1BBUkFNU19fIiwiTWVzc2FnZVR5cGUiLCJyZXF1aXJlIiwibG9hZERyYXdpbmdJZCIsImN1cnJlbnREcmF3aW5nSWQiLCJkcmF3aW5nRGF0YVN0YXRlIiwiU0FWRV9EUkFXSU5HIiwicGF5bG9hZCIsInN0b3JhZ2UiLCJsb2NhbCIsImRyYXdpbmdEYXRhIiwiZGF0YSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRJdGVtIiwibG9jYXRpb24iLCJyZWxvYWQiXSwic291cmNlUm9vdCI6IiJ9