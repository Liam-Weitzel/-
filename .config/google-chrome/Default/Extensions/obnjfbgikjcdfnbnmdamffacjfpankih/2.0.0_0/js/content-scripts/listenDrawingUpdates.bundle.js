(()=>{var e={757:(e,r,t)=>{e.exports=t(666)},901:function(e,r,t){var n,s;!function(o){"use strict";var a,i={};i.VERSION="1.6.1";var g={},l=function(e,r){return function(){return r.apply(e,arguments)}},c=function(){var e,r,t=arguments,n=t[0];for(r=1;r<t.length;r++)for(e in t[r])!(e in n)&&t[r].hasOwnProperty(e)&&(n[e]=t[r][e]);return n},m=function(e,r){return{value:e,name:r}};i.TRACE=m(1,"TRACE"),i.DEBUG=m(2,"DEBUG"),i.INFO=m(3,"INFO"),i.TIME=m(4,"TIME"),i.WARN=m(5,"WARN"),i.ERROR=m(8,"ERROR"),i.OFF=m(99,"OFF");var u=function(e){this.context=e,this.setLevel(e.filterLevel),this.log=this.info};u.prototype={setLevel:function(e){e&&"value"in e&&(this.context.filterLevel=e)},getLevel:function(){return this.context.filterLevel},enabledFor:function(e){var r=this.context.filterLevel;return e.value>=r.value},trace:function(){this.invoke(i.TRACE,arguments)},debug:function(){this.invoke(i.DEBUG,arguments)},info:function(){this.invoke(i.INFO,arguments)},warn:function(){this.invoke(i.WARN,arguments)},error:function(){this.invoke(i.ERROR,arguments)},time:function(e){"string"==typeof e&&e.length>0&&this.invoke(i.TIME,[e,"start"])},timeEnd:function(e){"string"==typeof e&&e.length>0&&this.invoke(i.TIME,[e,"end"])},invoke:function(e,r){a&&this.enabledFor(e)&&a(r,c({level:e},this.context))}};var A,f=new u({filterLevel:i.OFF});(A=i).enabledFor=l(f,f.enabledFor),A.trace=l(f,f.trace),A.debug=l(f,f.debug),A.time=l(f,f.time),A.timeEnd=l(f,f.timeEnd),A.info=l(f,f.info),A.warn=l(f,f.warn),A.error=l(f,f.error),A.log=A.info,i.setHandler=function(e){a=e},i.setLevel=function(e){for(var r in f.setLevel(e),g)g.hasOwnProperty(r)&&g[r].setLevel(e)},i.getLevel=function(){return f.getLevel()},i.get=function(e){return g[e]||(g[e]=new u(c({name:e},f.context)))},i.createDefaultHandler=function(e){(e=e||{}).formatter=e.formatter||function(e,r){r.name&&e.unshift("["+r.name+"]")};var r={},t=function(e,r){Function.prototype.apply.call(e,console,r)};return"undefined"==typeof console?function(){}:function(n,s){n=Array.prototype.slice.call(n);var o,a=console.log;s.level===i.TIME?(o=(s.name?"["+s.name+"] ":"")+n[0],"start"===n[1]?console.time?console.time(o):r[o]=(new Date).getTime():console.timeEnd?console.timeEnd(o):t(a,[o+": "+((new Date).getTime()-r[o])+"ms"])):(s.level===i.WARN&&console.warn?a=console.warn:s.level===i.ERROR&&console.error?a=console.error:s.level===i.INFO&&console.info?a=console.info:s.level===i.DEBUG&&console.debug?a=console.debug:s.level===i.TRACE&&console.trace&&(a=console.trace),e.formatter(n,s),t(a,n))}},i.useDefaults=function(e){i.setLevel(e&&e.defaultLevel||i.DEBUG),i.setHandler(i.createDefaultHandler(e))},i.setDefaults=i.useDefaults,void 0===(s="function"==typeof(n=i)?n.call(r,t,r,e):n)||(e.exports=s)}()},666:e=>{var r=function(e){"use strict";var r,t=Object.prototype,n=t.hasOwnProperty,s="function"==typeof Symbol?Symbol:{},o=s.iterator||"@@iterator",a=s.asyncIterator||"@@asyncIterator",i=s.toStringTag||"@@toStringTag";function g(e,r,t,n){var s=r&&r.prototype instanceof d?r:d,o=Object.create(s.prototype),a=new T(n||[]);return o._invoke=function(e,r,t){var n=c;return function(s,o){if(n===u)throw new Error("Generator is already running");if(n===A){if("throw"===s)throw o;return P()}for(t.method=s,t.arg=o;;){var a=t.delegate;if(a){var i=k(a,t);if(i){if(i===f)continue;return i}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(n===c)throw n=A,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);n=u;var g=l(e,r,t);if("normal"===g.type){if(n=t.done?A:m,g.arg===f)continue;return{value:g.arg,done:t.done}}"throw"===g.type&&(n=A,t.method="throw",t.arg=g.arg)}}}(e,t,a),o}function l(e,r,t){try{return{type:"normal",arg:e.call(r,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=g;var c="suspendedStart",m="suspendedYield",u="executing",A="completed",f={};function d(){}function h(){}function x(){}var p={};p[o]=function(){return this};var v=Object.getPrototypeOf,w=v&&v(v(I([])));w&&w!==t&&n.call(w,o)&&(p=w);var y=x.prototype=d.prototype=Object.create(p);function b(e){["next","throw","return"].forEach((function(r){e[r]=function(e){return this._invoke(r,e)}}))}function E(e,r){function t(s,o,a,i){var g=l(e[s],e,o);if("throw"!==g.type){var c=g.arg,m=c.value;return m&&"object"==typeof m&&n.call(m,"__await")?r.resolve(m.__await).then((function(e){t("next",e,a,i)}),(function(e){t("throw",e,a,i)})):r.resolve(m).then((function(e){c.value=e,a(c)}),(function(e){return t("throw",e,a,i)}))}i(g.arg)}var s;this._invoke=function(e,n){function o(){return new r((function(r,s){t(e,n,r,s)}))}return s=s?s.then(o,o):o()}}function k(e,t){var n=e.iterator[t.method];if(n===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=r,k(e,t),"throw"===t.method))return f;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var s=l(n,e.iterator,t.arg);if("throw"===s.type)return t.method="throw",t.arg=s.arg,t.delegate=null,f;var o=s.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=r),t.delegate=null,f):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function L(e){var r={tryLoc:e[0]};1 in e&&(r.catchLoc=e[1]),2 in e&&(r.finallyLoc=e[2],r.afterLoc=e[3]),this.tryEntries.push(r)}function S(e){var r=e.completion||{};r.type="normal",delete r.arg,e.completion=r}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function I(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var s=-1,a=function t(){for(;++s<e.length;)if(n.call(e,s))return t.value=e[s],t.done=!1,t;return t.value=r,t.done=!0,t};return a.next=a}}return{next:P}}function P(){return{value:r,done:!0}}return h.prototype=y.constructor=x,x.constructor=h,x[i]=h.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var r="function"==typeof e&&e.constructor;return!!r&&(r===h||"GeneratorFunction"===(r.displayName||r.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,x):(e.__proto__=x,i in e||(e[i]="GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},b(E.prototype),E.prototype[a]=function(){return this},e.AsyncIterator=E,e.async=function(r,t,n,s,o){void 0===o&&(o=Promise);var a=new E(g(r,t,n,s),o);return e.isGeneratorFunction(t)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},b(y),y[i]="Generator",y[o]=function(){return this},y.toString=function(){return"[object Generator]"},e.keys=function(e){var r=[];for(var t in e)r.push(t);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=I,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(S),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=r)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function s(n,s){return i.type="throw",i.arg=e,t.next=n,s&&(t.method="next",t.arg=r),!!s}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return s("end");if(a.tryLoc<=this.prev){var g=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(g&&l){if(this.prev<a.catchLoc)return s(a.catchLoc,!0);if(this.prev<a.finallyLoc)return s(a.finallyLoc)}else if(g){if(this.prev<a.catchLoc)return s(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return s(a.finallyLoc)}}}},abrupt:function(e,r){for(var t=this.tryEntries.length-1;t>=0;--t){var s=this.tryEntries[t];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var o=s;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=r&&r<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=r,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(a)},complete:function(e,r){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&r&&(this.next=r),f},finish:function(e){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),S(t),f}},catch:function(e){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.tryLoc===e){var n=t.completion;if("throw"===n.type){var s=n.arg;S(t)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:I(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=r),f}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},416:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.browser=t(337)},337:function(e,r){var t,n,s;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,n=[e],t=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const r="The message port closed before a response was received.",t="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",n=e=>{const n={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(n).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class s extends WeakMap{constructor(e,r=void 0){super(r),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}const o=e=>e&&"object"==typeof e&&"function"==typeof e.then,a=(r,t)=>(...n)=>{e.runtime.lastError?r.reject(new Error(e.runtime.lastError.message)):t.singleCallbackArg||n.length<=1&&!1!==t.singleCallbackArg?r.resolve(n[0]):r.resolve(n)},i=e=>1==e?"argument":"arguments",g=(e,r)=>function(t,...n){if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${i(r.minArgs)} for ${e}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${i(r.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((s,o)=>{if(r.fallbackToNoCallback)try{t[e](...n,a({resolve:s,reject:o},r))}catch(o){console.warn(`${e} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),t[e](...n),r.fallbackToNoCallback=!1,r.noCallback=!0,s()}else r.noCallback?(t[e](...n),s()):t[e](...n,a({resolve:s,reject:o},r))}))},l=(e,r,t)=>new Proxy(r,{apply:(r,n,s)=>t.call(n,e,...s)});let c=Function.call.bind(Object.prototype.hasOwnProperty);const m=(e,r={},t={})=>{let n=Object.create(null),s={has:(r,t)=>t in e||t in n,get(s,o,a){if(o in n)return n[o];if(!(o in e))return;let i=e[o];if("function"==typeof i)if("function"==typeof r[o])i=l(e,e[o],r[o]);else if(c(t,o)){let r=g(o,t[o]);i=l(e,e[o],r)}else i=i.bind(e);else if("object"==typeof i&&null!==i&&(c(r,o)||c(t,o)))i=m(i,r[o],t[o]);else{if(!c(t,"*"))return Object.defineProperty(n,o,{configurable:!0,enumerable:!0,get:()=>e[o],set(r){e[o]=r}}),i;i=m(i,r[o],t["*"])}return n[o]=i,i},set:(r,t,s,o)=>(t in n?n[t]=s:e[t]=s,!0),defineProperty:(e,r,t)=>Reflect.defineProperty(n,r,t),deleteProperty:(e,r)=>Reflect.deleteProperty(n,r)},o=Object.create(e);return new Proxy(o,s)},u=e=>({addListener(r,t,...n){r.addListener(e.get(t),...n)},hasListener:(r,t)=>r.hasListener(e.get(t)),removeListener(r,t){r.removeListener(e.get(t))}}),A=new s((e=>"function"!=typeof e?e:function(r){const t=m(r,{},{getContent:{minArgs:0,maxArgs:0}});e(t)}));let f=!1;const d=new s((e=>"function"!=typeof e?e:function(r,n,s){let a,i,g=!1,l=new Promise((e=>{a=function(r){f||(console.warn(t,(new Error).stack),f=!0),g=!0,e(r)}}));try{i=e(r,n,a)}catch(e){i=Promise.reject(e)}const c=!0!==i&&o(i);if(!0!==i&&!c&&!g)return!1;const m=e=>{e.then((e=>{s(e)}),(e=>{let r;r=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",s({__mozWebExtensionPolyfillReject__:!0,message:r})})).catch((e=>{console.error("Failed to send onMessage rejected reply",e)}))};return m(c?i:l),!0})),h=({reject:t,resolve:n},s)=>{e.runtime.lastError?e.runtime.lastError.message===r?n():t(new Error(e.runtime.lastError.message)):s&&s.__mozWebExtensionPolyfillReject__?t(new Error(s.message)):n(s)},x=(e,r,t,...n)=>{if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${i(r.minArgs)} for ${e}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${i(r.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((e,r)=>{const s=h.bind(null,{resolve:e,reject:r});n.push(s),t.sendMessage(...n)}))},p={devtools:{network:{onRequestFinished:u(A)}},runtime:{onMessage:u(d),onMessageExternal:u(d),sendMessage:x.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:x.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},v={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return n.privacy={network:{"*":v},services:{"*":v},websites:{"*":v}},m(e,p,n)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=n(chrome)}else e.exports=browser},void 0===(s="function"==typeof t?t.apply(r,n):t)||(e.exports=s)}},r={};function t(n){var s=r[n];if(void 0!==s)return s.exports;var o=r[n]={exports:{}};return e[n].call(o.exports,o,o.exports,t),o.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{"use strict";var e=t(757),r=t.n(e);let n;!function(e){e.SAVE_DRAWING="SAVE_DRAWING",e.SAVE_NEW_DRAWING="SAVE_NEW_DRAWING"}(n||(n={}));const s=Math.round(375),o=Math.round(195);var a=t(901),i=t.n(a);i().useDefaults(),i().setLevel(i().ERROR);const g=i();function l(e){return new Promise(((r,t)=>{e.oncomplete=e.onsuccess=()=>r(e.result),e.onabort=e.onerror=()=>t(e.error)}))}function c(e,r){const t=indexedDB.open(e);t.onupgradeneeded=()=>t.result.createObjectStore(r);const n=l(t);return(e,t)=>n.then((n=>t(n.transaction(r,e).objectStore(r))))}let m;function u(){return m||(m=c("keyval-store","keyval")),m}function A(e,r=u()){return r("readonly",(r=>Promise.all(e.map((e=>l(r.get(e)))))))}function f(e){return new Promise(((r,t)=>{const n=new FileReader;n.onloadend=()=>{const e=n.result;r(e)},n.onerror=t,n.readAsDataURL(e)}))}function d(e,r){if(g.log("👉 Original Image dimensions:",`${Math.round(e)} x ${Math.round(r)}`),e<=s&&r<=o)return{width:Math.max(1,e),height:Math.max(1,r),scale:1};const t=e/s,n=r/o,a=Math.max(t,n);return e=Math.max(1,Math.round(e/a)),r=Math.max(1,Math.round(r/a)),g.log("New Image dimensions",`${Math.round(e)} x ${Math.round(r)}`,a),{width:e,height:r,scale:1/a}}function h(e,r,t,n,s,o,a){try{var i=e[o](a),g=i.value}catch(e){return void t(e)}i.done?r(g):Promise.resolve(g).then(n,s)}function x(e){return function(){var r=this,t=arguments;return new Promise((function(n,s){var o=e.apply(r,t);function a(e){h(o,n,s,a,i,"next",e)}function i(e){h(o,n,s,a,i,"throw",e)}a(void 0)}))}}const p=c("files-db","files-store");function v(){return w.apply(this,arguments)}function w(){return w=x(r().mark((function e(){var t,n,s,o,a,i,l,c,m,u=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=u.length>0&&void 0!==u[0]?u[0]:{takeScreenshot:!0},n=E(),s=n.excalidraw,o=n.excalidrawState,a=n.versionFiles,i=n.versionDataState,l=JSON.parse(s),c=JSON.parse(o),e.prev=4,null==t||!t.takeScreenshot){e.next=9;break}return e.next=8,y({elements:l,appState:c});case 8:m=e.sent;case 9:e.next=14;break;case 11:e.prev=11,e.t0=e.catch(4),g.error("Error taking screenshot",e.t0);case 14:return e.abrupt("return",{excalidraw:s,excalidrawState:o,versionFiles:a,versionDataState:i,imageBase64:m,viewBackgroundColor:null==c?void 0:c.viewBackgroundColor});case 15:case"end":return e.stop()}}),e,null,[[4,11]])}))),w.apply(this,arguments)}function y(e){return b.apply(this,arguments)}function b(){return(b=x(r().mark((function e(t){var n,s,o,a,i,l,c;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.elements,s=t.appState,o=(new Date).getTime(),a=n.filter((e=>"image"===e.type)).map((e=>e.fileId)),i={},e.prev=4,e.next=7,A(a,p);case 7:e.sent.forEach((e=>{e&&(i[e.id]=e)})),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(4),g.warn("Error retrieving files from IndexedDB",e.t0);case 14:return e.next=16,window.ExcalidrawLib.exportToBlob({elements:n,getDimensions:(e,r)=>d(e,r),files:i,appState:s});case 16:return l=e.sent,e.next=19,f(l);case 19:return c=e.sent,g.log("📷 Take Screenshoot Took:",(new Date).getTime()-o+"ms"),e.abrupt("return",c);case 22:case"end":return e.stop()}}),e,null,[[4,11]])})))).apply(this,arguments)}function E(){return{excalidraw:localStorage.getItem("excalidraw"),excalidrawState:localStorage.getItem("excalidraw-state"),versionFiles:localStorage.getItem("version-files"),versionDataState:localStorage.getItem("version-dataState")}}function k(e,r,t,n,s,o,a){try{var i=e[o](a),g=i.value}catch(e){return void t(e)}i.done?r(g):Promise.resolve(g).then(n,s)}function L(e){return function(){var r=this,t=arguments;return new Promise((function(n,s){var o=e.apply(r,t);function a(e){k(o,n,s,a,i,"next",e)}function i(e){k(o,n,s,a,i,"throw",e)}a(void 0)}))}}const S=t(416).browser,T="destruct-my-extension_2_"+S.runtime.id;let I,P;document.dispatchEvent(new CustomEvent(T)),document.addEventListener(T,(()=>{try{g.log("Cleaning up from updates...",{DESTRUCTION_EVENT:T,timeoutId:I,intervalId:P}),clearTimeout(I),clearInterval(P)}catch(e){}})),S.runtime.connect().onDisconnect.addListener((function(){g.log("⛽️️️️️️️️️️️️️️️️p️RUntime disconnect")}));let R=localStorage.getItem("version-files");I=window.setTimeout((()=>{P=window.setInterval(L(r().mark((function e(){var t,s,o;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=localStorage.getItem("version-files"),!(s=localStorage.getItem("__drawing_id"))||R===t){e.next=15;break}return R=t,e.next=6,v();case 6:return o=e.sent,e.prev=7,e.next=10,S.runtime.sendMessage({type:n.SAVE_DRAWING,payload:{id:s,excalidraw:o.excalidraw,excalidrawState:o.excalidrawState,versionFiles:o.versionFiles,versionDataState:o.versionDataState,imageBase64:o.imageBase64,viewBackgroundColor:o.viewBackgroundColor}});case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(7),g.error("[Listen Changes] Error sending drawing data to save",e.t0);case 15:case"end":return e.stop()}}),e,null,[[7,12]])}))),2e3),window.addEventListener("beforeunload",(()=>{try{clearInterval(P)}catch(e){}}))}),5e3),window.addEventListener("beforeunload",(()=>{try{clearTimeout(I)}catch(e){}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,